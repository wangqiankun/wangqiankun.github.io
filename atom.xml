<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Qiankun's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://wangqiankun.github.io/"/>
  <updated>2015-10-13T14:55:33.000Z</updated>
  <id>http://wangqiankun.github.io/</id>
  
  <author>
    <name><![CDATA[WangQiankun]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Android Studio快捷键 -- OS X 10.5+]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/tools/Android%20Studio%E5%BF%AB%E6%8D%B7%E9%94%AE%20--%20OS%20X%2010.5+/"/>
    <id>http://wangqiankun.github.io/2015/10/13/tools/Android Studio快捷键 -- OS X 10.5+/</id>
    <published>2015-10-13T14:39:32.000Z</published>
    <updated>2015-10-13T14:55:33.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><em>F1–F12均需要加fn才能生效（可调成不用fn）</em></p>
</blockquote>
<h2 id="描述|快捷键|英文注释">描述|快捷键|英文注释</h2><ol>
<li>展示／关闭功能块    | cmd + 0－9 | 可操作界面上均有<u>0</u>-<u>9</u>:</li>
<li>单行注释    | cmd + / | Comment with Line Comment</li>
<li>多行注释    | cmd + option + /    | Comment with Block Comment</li>
<li>格式化代码| cmd + option + L    | Reformat code</li>
<li>选中代码向上/向下移动| cmd + shift + ⬆️/⬇️    | Move Statement Up/Down</li>
<li>跳转到下／上个方法 | control ＋ ⬇️／⬆️（系统占用改＋Fn）|Next／Previous Method</li>
</ol>
<p>##最近需要掌握的快捷键</p>
<ol>
<li>展示’方法/类/变量’被使用的列表 | cmd + B | Declaration</li>
<li><p>跳转到继承的方法/类 | cmd + shift + B | Implementation</p>
</li>
<li><p>展示最近查看的文件列表 | cmd + E | Recent Files</p>
</li>
<li><p>展示最近修改的文件列表 | cmd + shift + E | Recently Changed Files</p>
</li>
<li><p>在测试代码与产品代码间切换 | cmd + shift + T | Test</p>
</li>
<li>查看JavaDoc | F1 / ctrl + J | Quick Documentation</li>
<li>查看源代码 | cmd + Y | Quick Definition</li>
</ol>
<p>##方法</p>
<ol>
<li>导入包、自动修正、快速修复| option + return| Show intention actions</li>
<li>生成geter/seter方法|    cmd + N / ctrl + return |    Generate</li>
<li>优化导入包| ctrl + option + O| Optimize Imports</li>
<li>查看方法说明文档|    ctrl + J | Quick Documentation</li>
<li>方法参数提示|     cmd + P | Parameter Info</li>
<li>全局修改变量名、类名| cmd + F6 | Change Signature</li>
</ol>
<p>##搜索</p>
<ol>
<li>本类中所有的方法、属性｜ cmd + F12 | File Structure</li>
<li>本类中所有的方法、属性在左侧显示| cmd + 7 | Structure</li>
<li>全局代码搜索| cmd + shift + F| Find in Path</li>
<li>全局代码替换| cmd + shift + R| Replace in Path</li>
</ol>
<p>##模版代码</p>
<ol>
<li>插入模版代码| cmd + J|Insert Live Template</li>
<li>添加模版代码| cmd + option + J|Surround With Live Template</li>
</ol>
<p>##其他</p>
<ol>
<li>从最近的缓冲区粘贴| cmd ＋ shift ＋v| Paste from History</li>
<li>扩大选中区域| option + ⬆️|Extend Selection</li>
<li>缩小选中区域| option + ⬇️|Shrink Selection</li>
</ol>
<p>##版本控制</p>
<ol>
<li>Update 代码| cmd + T |Vcs.Update Project</li>
<li>Check 代码| cmd + K |Check in Project</li>
<li>弹出版本控制菜单| ctrl + V |Vcs Operations Popup</li>
</ol>
<p>##Debug</p>
<ol>
<li>结束debug| cmd + F2 |</li>
<li>跳转到下个断点| cmd + option + R |</li>
</ol>
<blockquote>
<p>参考：<br><a href="http://www.juvenxu.com/2013/07/18/my-most-used-intellij-idea-shortcuts/" target="_blank" rel="external">我最常使用的一些IntelliJ IDEA快捷键</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><em>F1–F12均需要加fn才能生效（可调成不用fn）</em></p>
</blockquote>
<h2 id="描述|快捷键|英文注释">描述|快捷键|英文注释</h2><ol>
<li>展示／关闭功能块    | cmd + 0－9 |]]>
    </summary>
    
      <category term="Tools" scheme="http://wangqiankun.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio 添加support库]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/Android%20Studio%C2%A0%E6%B7%BB%E5%8A%A0support%E5%BA%93/"/>
    <id>http://wangqiankun.github.io/2015/10/13/Android Studio 添加support库/</id>
    <published>2015-10-13T14:38:25.000Z</published>
    <updated>2015-10-13T14:39:04.000Z</updated>
    <content type="html"><![CDATA[<p>用到v4、v7包时不知道怎么在gradle中导入，或者不知道怎么写<br>可以使用快捷键’commend+;’进入’Project Structure’设置界面。<br>上排找到’Dependencies’标签，点击’+’号。就可以找到本地的v4、v7的依赖。ok既可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>用到v4、v7包时不知道怎么在gradle中导入，或者不知道怎么写<br>可以使用快捷键’commend+;’进入’Project Structure’设置界面。<br>上排找到’Dependencies’标签，点击’+’号。就可以找到本地的v4、v7的依赖。ok既可。</]]>
    </summary>
    
      <category term="Android" scheme="http://wangqiankun.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ToastUtils.java]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/ToastUtils-java/"/>
    <id>http://wangqiankun.github.io/2015/10/13/ToastUtils-java/</id>
    <published>2015-10-13T14:30:50.000Z</published>
    <updated>2015-10-13T14:34:30.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wqk.utils;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">import</span> android.content.Context;</span><br><span class="line">  <span class="keyword">import</span> android.os.Handler;</span><br><span class="line">  <span class="keyword">import</span> android.os.Looper;</span><br><span class="line">  <span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * 公共Toast类，</span><br><span class="line">   * Created by wqk on 15/8/29.</span><br><span class="line">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToastUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> Looper mainLooper = Looper.getMainLooper();</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> Handler <span class="keyword">handler</span> = <span class="keyword">new</span> Handler(Looper.getMainLooper());</span><br><span class="line"></span><br><span class="line">      ToastUtils() &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">showL</span><span class="params">(Context context, <span class="keyword">int</span> resId)</span> </span>&#123;</span><br><span class="line">          show(context, context.getResources().getText(resId), Toast.LENGTH_LONG);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">showL</span><span class="params">(Context context, String string)</span> </span>&#123;</span><br><span class="line">          show(context, string, Toast.LENGTH_LONG);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">showS</span><span class="params">(Context context, <span class="keyword">int</span> resId)</span> </span>&#123;</span><br><span class="line">          show(context, context.getResources().getText(resId), Toast.LENGTH_SHORT);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">showS</span><span class="params">(Context context, String string)</span> </span>&#123;</span><br><span class="line">          show(context, string, Toast.LENGTH_SHORT);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> CharSequence text, <span class="keyword">final</span> <span class="keyword">int</span> duration)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (Looper.myLooper() == mainLooper) &#123;</span><br><span class="line">              Toast.makeText(context, text, duration).show();</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">handler</span>.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                  <span class="annotation">@Override</span></span><br><span class="line">                  <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                      Toast.makeText(context, text, duration).show();</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span cla]]>
    </summary>
    
      <category term="Android" scheme="http://wangqiankun.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RxJave小笔记]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/RxJave%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    <id>http://wangqiankun.github.io/2015/10/13/RxJave小笔记/</id>
    <published>2015-10-13T14:29:13.000Z</published>
    <updated>2015-10-13T14:29:31.000Z</updated>
    <content type="html"><![CDATA[<p>自用，摘抄于<a href="http://blog.csdn.net/lzyzsd/article/category/2767743" target="_blank" rel="external">大头鬼blog</a></p>
<p>###基本流程<br>一般响应式编程的信息流如下所示：<br>Observable -&gt; Operator 1 -&gt; Operator 2 -&gt; Operator 3 -&gt; Subscriber<br>observable是事件的生产者，subscriber是事件最终的消费者。<br>Operators 即操作符：为了解决对Observable对象的变换的问题。用于在Observable和最终的Subscriber之间修改Observable发出的事件</p>
<ol>
<li>Observable<string> stringObservable = Observable.create(new Observable.OnSub…){…}</string></li>
<li>Subscriber<string> subscriber = new Subscriber<string>() {…}</string></string></li>
<li>stringObservable.subscribe(subscriber);<br>通俗解释下上述代码：1为创建事件 2.</li>
</ol>
<h4 id="响应式特点">响应式特点</h4><p>Subscriber有三个方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123; System.out.println(s); &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"Completed!"</span>); &#125;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123; System.out.println(<span class="string">"Ouch!"</span>); &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>1.只要有异常发生onError()一定会被调用</p>
<p>这极大的简化了错误处理。只需要在一个地方处理错误即可以。</p>
<p>2.操作符不需要处理异常</p>
<p>将异常处理交给订阅者来做，Observerable的操作符调用链中一旦有一个抛出了异常，就会直接执行onError()方法。</p>
<p>3.你能够知道什么时候订阅者已经接收了全部的数据。</p>
<p>####Operators常用操作符</p>
<ol>
<li>map 就是用来把把一个事件转换为另一个事件的。</li>
<li>flatMap 它可以返回任何它想返回的Observable对象。</li>
<li>filter(title -&gt; title != null)  过滤某种不满足条件，比如!＝nullfilter()输出和输入相同的元素，并且会过滤掉那些不满足检查条件的。</li>
<li>take()输出最多指定数量的结果。 take(5)</li>
<li>doOnNext()允许我们在每次输出一个元素之前做一些额外的事情，比如这里的保存标题。.doOnNext(title -&gt; saveTitle(title))</li>
<li>.subscribeOn(Schedulers.io()) 指定在Schedulers io中执行</li>
<li>.observeOn(AndroidSchedulers.mainThread()) 指定在主线程中执行</li>
<li>Observable.subscribe()返回一个Observable  其中纪录了是否与订阅者有关联 。调用unsubscribing方法可以取消关联，并立即停止整个调用链</li>
<li>可自定义</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>自用，摘抄于<a href="http://blog.csdn.net/lzyzsd/article/category/2767743" target="_blank" rel="external">大头鬼blog</a></p>
<p>###基本流程<br>一般响应式编程]]>
    </summary>
    
      <category term="Android" scheme="http://wangqiankun.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Studio使用Java8的lambda命令]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/Studio%E4%BD%BF%E7%94%A8Java8%E7%9A%84lambda%E5%91%BD%E4%BB%A4/"/>
    <id>http://wangqiankun.github.io/2015/10/13/Studio使用Java8的lambda命令/</id>
    <published>2015-10-13T14:27:30.000Z</published>
    <updated>2015-10-13T14:27:56.000Z</updated>
    <content type="html"><![CDATA[<p>###使用前<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span> button = (<span class="type">Button</span>) findViewById(R.id.button);</span><br><span class="line">button.setOnClickListener(new <span class="type">View</span>.<span class="type">OnClickListener</span>() &#123;</span><br><span class="line">   @<span class="type">Override</span></span><br><span class="line">   public <span class="type">void</span> onClick(<span class="type">View</span> v) &#123;</span><br><span class="line">       <span class="keyword">method</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>###使用后(我所知道的所有的匿名内部类都可简化)<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span> button = (<span class="type">Button</span>) findViewById(R.id.button);</span><br><span class="line">button.setOnClickListener(v -&gt; <span class="keyword">method</span>());</span><br></pre></td></tr></table></figure></p>
<p>1.在Project工程目录使用</p>
<pre><code><span class="keyword">dependencies</span> {
<span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:1.2.3'</span>
<span class="keyword">classpath</span> <span class="string">'me.tatarka:gradle-retrolambda:3.1.0'</span>
<span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span>
<span class="comment">// in the individual module build.gradle files</span>
}
</code></pre><p> 2.在Moudule中使用 以下是例子</p>
<pre><code>apply plugin: <span class="string">'com.android.application'</span>
<span class="comment">//添加－1</span>
apply plugin: <span class="string">'me.tatarka.retrolambda'</span>


android {
compileSdkVersion <span class="number">21</span>
buildToolsVersion <span class="string">"21.1.2"</span>

defaultConfig {
    applicationId <span class="string">"com.wqk.demo.rxandroid"</span>
    minSdkVersion <span class="number">14</span>
    targetSdkVersion <span class="number">21</span>
    versionCode <span class="number">1</span>
    versionName <span class="string">"1.0"</span>
}

<span class="comment">//添加－2</span>
compileOptions {
    <span class="keyword">sourceCompatibility</span> JavaVersion.VERSION_1_8
    <span class="keyword">targetCompatibility</span> JavaVersion.VERSION_1_8
}

buildTypes {
    release {
        minifyEnabled <span class="keyword">false</span>
        proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span>
        }
    }
}

<span class="keyword">dependencies</span> {
    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(<span class="keyword">include</span>: [<span class="string">'*.jar'</span>], dir: <span class="string">'libs'</span>)
    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:22.2.0'</span>
    <span class="keyword">compile</span> <span class="string">'io.reactivex:rxandroid:0.25.0'</span>
}

<span class="keyword">repositories</span> {
    mavenCentral()
}

<span class="comment">//添加JAVA8支持 －3</span>
retrolambda {
<span class="comment">//Comend＋；可以弹出本地JDK地址设置界面，拷贝就行</span>
   jdk <span class="string">"/Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home"</span>
}
</code></pre><p>3.注意事项：需下载JAVA8 （编码可以不用，在Gradle另配）</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>###使用前<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><]]>
    </summary>
    
      <category term="Android" scheme="http://wangqiankun.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Button的点击效果和Clickable效果]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/Button%E7%9A%84%E7%82%B9%E5%87%BB%E6%95%88%E6%9E%9C%E5%92%8CClickable%E6%95%88%E6%9E%9C/"/>
    <id>http://wangqiankun.github.io/2015/10/13/Button的点击效果和Clickable效果/</id>
    <published>2015-10-13T14:25:45.000Z</published>
    <updated>2015-10-13T14:26:05.000Z</updated>
    <content type="html"><![CDATA[<p>由于产品需求，button的点击状态、Clickable状态都要有不同的显示效果<br>研究Selector半天也没有找到可以使不同状态同时展示<br>于是，就迂回用笨方法搞定</p>
<ul>
<li>1）自定义一个集成Button的类,重写setClickable状态，在两种状态设置不同背景色以及TextColor</li>
</ul>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BtnBottom</span> <span class="keyword">extends</span> <span class="title">Button</span> </span>{

    <span class="function"><span class="keyword">public</span> <span class="title">BtnBottom</span><span class="params">(Context context)</span> </span>{
        <span class="keyword">super</span>(context);
    }

    <span class="function"><span class="keyword">public</span> <span class="title">BtnBottom</span><span class="params">(Context context, AttributeSet attrs)</span> </span>{
        <span class="keyword">super</span>(context, attrs);
    }

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClickable</span><span class="params">(<span class="keyword">boolean</span> clickable)</span> </span>{
        <span class="keyword">super</span>.setClickable(clickable);
        <span class="keyword">if</span> (clickable) {
            <span class="keyword">this</span>.setBackgroundResource(R.drawable.bg_btn_bottom_normal);
            <span class="keyword">this</span>.setTextColor(getResources().getColor(R.color.text_fff));
        } <span class="keyword">else</span> {
            <span class="keyword">this</span>.setBackgroundColor(getResources().getColor(R.color.btn_f1f1f2));
            <span class="keyword">this</span>.setTextColor(getResources().getColor(R.color.text_d7d7d8));
        }
    }
}
</code></pre><ul>
<li>2）因为需要点击效果，所以在clickable为true时，设置背景色为selector</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">selector</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:drawable</span>=<span class="value">"@color/btn_b311213a"</span> <span class="attribute">android:state_pressed</span>=<span class="value">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:drawable</span>=<span class="value">"@color/btn_b311213a"</span> <span class="attribute">android:state_focused</span>=<span class="value">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:drawable</span>=<span class="value">"@color/btn_11213a"</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>心得：selector 名为选择器，也就是说遇到对应的的item就会使用，可能之前顺序排列没做好，<br>或者可以在seletor中嵌套seletor？需待实验下</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>由于产品需求，button的点击状态、Clickable状态都要有不同的显示效果<br>研究Selector半天也没有找到可以使不同状态同时展示<br>于是，就迂回用笨方法搞定</p>
<ul>
<li>1）自定义一个集成Button的类,重写setClickable状态，]]>
    </summary>
    
      <category term="Android" scheme="http://wangqiankun.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AndroidSudio下用butterknife注解]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/AndroidSudio%E4%B8%8B%E7%94%A8butterknife%E6%B3%A8%E8%A7%A3/"/>
    <id>http://wangqiankun.github.io/2015/10/13/AndroidSudio下用butterknife注解/</id>
    <published>2015-10-13T14:17:58.000Z</published>
    <updated>2015-10-13T14:18:23.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>在gradle中引用 compile ‘compile ‘com.jakewharton:butterknife:7.0.1’’ 这个库<br>最新版本<a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">点击这里查看</a></li>
<li>在插件搜butterknife-zelezny，然后安装</li>
<li>按<a href="https://github.com/avast/android-butterknife-zelezny" target="_blank" rel="external">这里</a>的动图提示的快捷键来就行了</li>
</ol>
<blockquote>
<p>注意：使用快捷键的时候，需要把鼠标放在layout的资源文件名上。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li>在gradle中引用 compile ‘compile ‘com.jakewharton:butterknife:7.0.1’’ 这个库<br>最新版本<a href="https://github.com/JakeWharton/butterknife" ta]]>
    </summary>
    
      <category term="Android" scheme="http://wangqiankun.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[那些年我所趟过的坑系列之Git配置双账号]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/tools/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E6%89%80%E8%B6%9F%E8%BF%87%E7%9A%84%E5%9D%91%E7%B3%BB%E5%88%97%E4%B9%8BGit%E9%85%8D%E7%BD%AE%E5%8F%8C%E8%B4%A6%E5%8F%B7/"/>
    <id>http://wangqiankun.github.io/2015/10/13/tools/那些年我所趟过的坑系列之Git配置双账号/</id>
    <published>2015-10-13T14:15:15.000Z</published>
    <updated>2015-10-13T14:16:59.000Z</updated>
    <content type="html"><![CDATA[<p>提交代码遇到权限问题：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">localhost:</span>main wangqiankun<span class="variable">$ </span>git push origin <span class="constant">HEAD</span><span class="symbol">:refs/for/master</span></span><br><span class="line"><span class="constant">Username</span> <span class="keyword">for</span> <span class="string">'http://192.xxx.xx.xxx'</span><span class="symbol">:</span> wangqiankun</span><br><span class="line"><span class="constant">Password</span> <span class="keyword">for</span> <span class="string">'http://wangqiankun@192.xxx.xx.xxx'</span><span class="symbol">:</span></span><br><span class="line"><span class="symbol">remote:</span> <span class="constant">Unauthorized</span></span><br><span class="line"><span class="symbol">fatal:</span> <span class="constant">Authentication</span> failed <span class="keyword">for</span> <span class="string">'http://192.xxx.xx.xxx/biz/mobile/dd-android-agent/'</span></span><br></pre></td></tr></table></figure>
<p>##错误</p>
<ol>
<li>在clone代码时需要选中“clone with commit-msg hook”和“SSH”两个选项<br>拷贝clone代码回车后，如果让你输入账号就是操作不正确，哪怕输入后能down代码</li>
<li>配置config时需如下输入</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hexcolor">#Def</span>ault work user (wangqiankun@zufangit.cn)</span><br><span class="line">Host <span class="number">192</span><span class="class">.xxx</span><span class="class">.xx</span><span class="class">.xxx</span></span><br><span class="line">        User wangqiankun</span><br><span class="line">        HostName <span class="number">192</span><span class="class">.xxx</span><span class="class">.xx</span><span class="class">.xxx</span></span><br><span class="line">        IdentityFile ~/.ssh/id_rsa</span><br><span class="line"><span class="id">#GitHub</span> user (wangqiankun@outloo.com)</span><br><span class="line">Host github<span class="class">.com</span></span><br><span class="line">        User wangqiankun@outlook<span class="class">.com</span></span><br><span class="line">        HostName github<span class="class">.com</span></span><br><span class="line">        IdentityFile ~/.ssh/gitgub_rsa</span><br><span class="line">~</span><br></pre></td></tr></table></figure>
<p>注意细节：</p>
<ol>
<li>Host与HostName需一致，并且“192.xxx.xx.xxx”不可写为“<a href="http://192.xxx.xx.xxx/”" target="_blank" rel="external">http://192.xxx.xx.xxx/”</a></li>
<li>“~/.ssh/id_rsa”中“id_rsa”文件与账号对应</li>
</ol>
<h3 id="BaiBai!">BaiBai!</h3>]]></content>
    <summary type="html">
    <![CDATA[<p>提交代码遇到权限问题：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</sp]]>
    </summary>
    
      <category term="Tools" scheme="http://wangqiankun.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Studio使用Gerrit插件]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/tools/Studio%E4%BD%BF%E7%94%A8Gerrit%E6%8F%92%E4%BB%B6/"/>
    <id>http://wangqiankun.github.io/2015/10/13/tools/Studio使用Gerrit插件/</id>
    <published>2015-10-13T14:13:03.000Z</published>
    <updated>2015-10-13T14:51:39.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>搜索安装Gerrit插件</li>
<li>在菜单中设置URL和Git用户名和密码<br> <img src="/pic/gerrit1.png" alt=""></li>
<li>在AS的主界面就能看到详细信息了<br> <img src="/pic/gerrit2.png" alt=""></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li>搜索安装Gerrit插件</li>
<li>在菜单中设置URL和Git用户名和密码<br> <img src="/pic/gerrit1.png" alt=""></li>
<li>在AS的主界面就能看到详细信息了<br> <img src="/pic/gerr]]>
    </summary>
    
      <category term="Tools" scheme="http://wangqiankun.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git入门]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/tools/git%E5%85%A5%E9%97%A8/"/>
    <id>http://wangqiankun.github.io/2015/10/13/tools/git入门/</id>
    <published>2015-10-13T14:12:50.000Z</published>
    <updated>2015-10-13T14:44:15.000Z</updated>
    <content type="html"><![CDATA[<p>###常用命令</p>
<ol>
<li>从服务器down代码  -&gt;git clone</li>
<li>查看提交纪录  -&gt;git log</li>
<li>添加某个修改的文件  -&gt;git add 修改的文件</li>
<li>把不想提交的文件放入.gitignore中  -&gt;不知道</li>
<li>add全部修改过的文件  -&gt;git commit -a或git commit —all</li>
<li>更新代码  -&gt;git pull -r（r表示rebase）</li>
<li>本地提交代码  -&gt;git commit -m “这里是备注”</li>
<li>向服务器提交代码  -&gt;git push（未确认）</li>
<li>把修改提交到gerrit中repo的master分支上（如果不是master分支，refs/for/分支名） -&gt;git push origin HEAD:refs/for/master</li>
<li>本地纪录提交审核不通过的代码（git add 修改的文件）  -&gt;git commit —amend<br>11status</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>###常用命令</p>
<ol>
<li>从服务器down代码  -&gt;git clone</li>
<li>查看提交纪录  -&gt;git log</li>
<li>添加某个修改的文件  -&gt;git add 修改的文件</li>
<li>把不想提交的文件放入.]]>
    </summary>
    
      <category term="Tools" scheme="http://wangqiankun.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用友盟自定义错误]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/%E4%BD%BF%E7%94%A8%E5%8F%8B%E7%9B%9F%E8%87%AA%E5%AE%9A%E4%B9%89%E9%94%99%E8%AF%AF/"/>
    <id>http://wangqiankun.github.io/2015/10/13/使用友盟自定义错误/</id>
    <published>2015-10-13T12:16:41.000Z</published>
    <updated>2015-10-13T12:25:11.000Z</updated>
    <content type="html"><![CDATA[<p>因为catch的Error或Exception友盟无法获取，那么就可以使用友盟提供的自定义错误来解决</p>
<ol>
<li>在AndroidManifest.xml里面添加读取日志的权限android.permission.READ_LOGS</li>
<li>在MainActicity的OnCreate方法中调用<br>MobclickAgent.setCatchUncaughtExceptions(true);</li>
<li>在catch的语句中使用用MobclickAgent.reportError(Context context,String error) 或者<br>MobclickAgent.reportError(Context context, Throwable e)语句，使友盟上传日志</li>
</ol>
<p>也可以自定义标签<br>MobclickAgent.onEvent(Contextcontext, String event_id, String  label);</p>
<p>参考<a href="http://www.apkbus.com/home.php?mod=space&amp;uid=317549&amp;do=blog&amp;id=54835" target="_blank" rel="external">MobclickAgent——友盟用户分析工具</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>因为catch的Error或Exception友盟无法获取，那么就可以使用友盟提供的自定义错误来解决</p>
<ol>
<li>在AndroidManifest.xml里面添加读取日志的权限android.permission.READ_LOGS</li>
<li>在Mai]]>
    </summary>
    
      <category term="Android" scheme="http://wangqiankun.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TextView中的滚动效果]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/TextView%E4%B8%AD%E7%9A%84%E6%BB%9A%E5%8A%A8%E6%95%88%E6%9E%9C/"/>
    <id>http://wangqiankun.github.io/2015/10/13/TextView中的滚动效果/</id>
    <published>2015-10-13T12:11:36.000Z</published>
    <updated>2015-10-13T12:12:04.000Z</updated>
    <content type="html"><![CDATA[<p>只需要要在xml中添加以下字段<br>android:scrollbars=”vertical” //垂直 可以其他滚动方向</p>
<p>也可以扩展以下配置<br>android:scrollbarStyle=”X” //其中X为outsideOverlay或insideOverlay。<br>android:scrollbarFadeDuration=”X” //其中X表示滚动条从出现到消失的时间，单位是毫秒。</p>
<p>android:fadingEdge=”vertical” //设置拉滚动条时 ，边框渐变的方向。</p>
<blockquote>
<p>参考资料：<br><a href="http://blog.csdn.net/crazyzhangcrazy/article/details/8596451" target="_blank" rel="external">[Android] TextView的垂直滚动效果</a><br><a href="http://www.open-open.com/lib/view/open1392086471160.html" target="_blank" rel="external">Android View 属性详解</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>只需要要在xml中添加以下字段<br>android:scrollbars=”vertical” //垂直 可以其他滚动方向</p>
<p>也可以扩展以下配置<br>android:scrollbarStyle=”X” //其中X为outsideOverlay或inside]]>
    </summary>
    
      <category term="Android" scheme="http://wangqiankun.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用merge标签 减少布局嵌套]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/%E4%BD%BF%E7%94%A8merge%E6%A0%87%E7%AD%BE%20%E5%87%8F%E5%B0%91%E5%B8%83%E5%B1%80%E5%B5%8C%E5%A5%97/"/>
    <id>http://wangqiankun.github.io/2015/10/13/使用merge标签 减少布局嵌套/</id>
    <published>2015-10-13T12:00:17.000Z</published>
    <updated>2015-10-13T12:01:58.000Z</updated>
    <content type="html"><![CDATA[<p>当包含有mearge标签的布局被添加到另一个布局时，该布局的merge节点会被删除，而该布局的子View会被肢解添加到新的父布局中</p>
<p>merge标签结合include标签一起使用时尤其有用</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>当包含有mearge标签的布局被添加到另一个布局时，该布局的merge节点会被删除，而该布局的子View会被肢解添加到新的父布局中</p>
<p>merge标签结合include标签一起使用时尤其有用</p>
]]>
    </summary>
    
      <category term="Android" scheme="http://wangqiankun.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gradle系列之BuildConfig文件]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/tools/Gradle%E7%B3%BB%E5%88%97%E4%B9%8BBuildConfig%E6%96%87%E4%BB%B6/"/>
    <id>http://wangqiankun.github.io/2015/10/13/tools/Gradle系列之BuildConfig文件/</id>
    <published>2015-10-13T10:57:17.000Z</published>
    <updated>2015-10-13T12:05:06.000Z</updated>
    <content type="html"><![CDATA[<p> 在使用Gradle配置debug和release时，会对应生成BuildConfig.java文件，默认不打包状态使用的是debug状态。</p>
<p><strong>问题来了：当你需要调试正式环境时，直接运行的程序需要使用release状态怎么办？</strong></p>
<p><img src="/pic/gradle_buildconfig.gif" alt=""></p>
<p>注意：选择debug或者release后，对应BuildConfig.java所属文件夹上会替换成有星号标志的</p>
]]></content>
    <summary type="html">
    <![CDATA[<p> 在使用Gradle配置debug和release时，会对应生成BuildConfig.java文件，默认不打包状态使用的是debug状态。</p>
<p><strong>问题来了：当你需要调试正式环境时，直接运行的程序需要使用release状态怎么办？</strong><]]>
    </summary>
    
      <category term="Tools" scheme="http://wangqiankun.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gradle自动构建]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/tools/Gradle%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA/"/>
    <id>http://wangqiankun.github.io/2015/10/13/tools/Gradle自动构建/</id>
    <published>2015-10-13T08:31:32.000Z</published>
    <updated>2015-10-13T12:04:19.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>构建跟打包有天壤之别，一句命令可以打成你想要的各种包<br>可灵活配置生产与测试环境的差异…等</p>
<p>牛逼之处，远不止于此</p>
</blockquote>
<ol>
<li>在项目目录中先执行 ‘./gradlew clean’ 如果提示没权限 则使用 ‘sudo ./gradlew clean’</li>
<li>Mac可能会提示 ‘sudo: ./gradlew: command not found’ ，意思大概为文件为非可执行状态,先执行 ‘chmod 755 gradlew’ 修改文件属性后，再执行此语句</li>
<li>执行 ‘./gradle build’ 会生成debug和release两个包</li>
<li>生成的app在/项目/app/build/outputs/apk下</li>
</ol>
<blockquote>
<p>如果之前未使用过gradle构建项目，一般会从新下载gradle包，无论之前是否使用过。（不过构建下载后，全部的项目都不用再下载gradle了）</p>
<p>下载时间较久，耐心等待………………你会懂得为什么这么多”…”</p>
</blockquote>
<h1 id="涉及到的功能点">涉及到的功能点</h1><h2 id="一、android_{}_中的(自上至下，顺序很重要)">一、android {} 中的(自上至下，顺序很重要)</h2><blockquote>
<p>defaultConfig为默认配置，其中任何配置都可被其他模块替换滴</p>
</blockquote>
<h3 id="签名文件配置（为保证安全，可创建signing-properties文件，在该文件配置路径,向下翻）">签名文件配置（为保证安全，可创建signing.properties文件，在该文件配置路径,向下翻）</h3>   <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">signingConfigs</span> &#123;</span><br><span class="line">   <span class="tag">debug</span> &#123;&#125;</span><br><span class="line">   <span class="tag">release</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置不同版本buildTypes模块（会对应生成名为BuildConfig的文件）,如下">配置不同版本buildTypes模块（会对应生成名为BuildConfig的文件）,如下</h3><blockquote>
<p>其中buildConfigField(“boolean”, “LOG_DEBUG”, “true”)是自定义语句</p>
</blockquote>
<p>   语法buildConfigField(“类型（同JAVA）”,”名字”,”值”)</p>
<p>   使用方法 public final static String LOG_DEBUG = BuildConfig.LOG_DEBUG;   </p>
   <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">  debug&#123;</span><br><span class="line">      <span class="comment">// 版本名前缀</span></span><br><span class="line">      versionNameSuffix <span class="string">"-debug"</span></span><br><span class="line">      buildConfigField(<span class="string">"boolean"</span>, <span class="string">"LOG_DEBUG"</span>, <span class="string">"true"</span>)</span><br><span class="line">      buildConfigField <span class="string">"String"</span>, <span class="string">"BASE_URL"</span>, <span class="string">"\"http://192.168.1.224:8080/\""</span></span><br><span class="line">      buildConfigField <span class="string">"String"</span>, <span class="string">"BASE_IMG_URL"</span>, <span class="string">"\"http://192.168.1.233:8888/dd-file-gw/\""</span></span><br><span class="line">      minifyEnabled <span class="literal">false</span></span><br><span class="line">      zipAlignEnabled <span class="literal">false</span></span><br><span class="line">      shrinkResources <span class="literal">false</span></span><br><span class="line">      signingConfig signingConfigs.debug</span><br><span class="line">  &#125;</span><br><span class="line">  release &#123;</span><br><span class="line">      <span class="comment">// 版本名前缀</span></span><br><span class="line">      versionNameSuffix <span class="string">"-relase"</span></span><br><span class="line">      <span class="comment">//牛逼哄哄的选择是否输出LOG信息</span></span><br><span class="line">      buildConfigField(<span class="string">"Boolean"</span>, <span class="string">"LOG_DEBUG"</span>, <span class="string">"false"</span>)</span><br><span class="line">      <span class="comment">//牛逼哄哄的设置BASE_URL</span></span><br><span class="line">      buildConfigField <span class="string">"String"</span>, <span class="string">"BASE_URL"</span>, <span class="string">"\"http://mobile.zufangzi.com/\""</span></span><br><span class="line">      <span class="comment">//牛逼哄哄的设置BASE_IMG_URL</span></span><br><span class="line">      buildConfigField <span class="string">"String"</span>, <span class="string">"BASE_IMG_URL"</span>, <span class="string">"\"http://static.zufangzi.com/\""</span></span><br><span class="line">      <span class="comment">//牛逼哄哄的选择是否混淆编译</span></span><br><span class="line">      minifyEnabled <span class="literal">false</span></span><br><span class="line">      <span class="comment">//牛逼哄哄的档案整理工具</span></span><br><span class="line">      zipAlignEnabled <span class="literal">true</span></span><br><span class="line">      <span class="comment">//牛逼哄哄的移除无用的资源文件</span></span><br><span class="line">      shrinkResources <span class="literal">true</span></span><br><span class="line">      signingConfig signingConfigs.release</span><br><span class="line">      proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="修改生成的最终文件名,如下">修改生成的最终文件名,如下</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">applicationVariants.all &#123; variant -&gt;</span><br><span class="line">    variant.outputs.<span class="keyword">each</span> &#123; output -&gt;</span><br><span class="line">        <span class="keyword">def</span> outputFile = output.outputFile</span><br><span class="line">        <span class="keyword">if</span> (outputFile != <span class="keyword">null</span> &amp;&amp; outputFile.name.endsWith(<span class="string">'.apk'</span>)) &#123;</span><br><span class="line">            <span class="keyword">File</span> outputDirectory = <span class="keyword">new</span> <span class="keyword">File</span>(outputFile.parent);</span><br><span class="line">            <span class="keyword">def</span> fileName</span><br><span class="line">            <span class="keyword">if</span> (variant.buildType.name == <span class="string">"release"</span>) &#123;</span><br><span class="line">                fileName = <span class="string">"Butler.$&#123;defaultConfig.versionName&#125;.apk"</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fileName = <span class="string">"Butler.$&#123;defaultConfig.versionName&#125;_beta.apk"</span></span><br><span class="line">            &#125;</span><br><span class="line">            output.outputFile = <span class="keyword">new</span> <span class="keyword">File</span>(outputDirectory, fileName)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="二、android_{}_下面的">二、android {} 下面的</h2><h3 id="使用signing-properties记录keyStore的地址以及密码">使用signing.properties记录keyStore的地址以及密码</h3>   <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">File</span> propFile = <span class="keyword">file</span>(<span class="string">'signing.properties'</span>);</span><br><span class="line"><span class="keyword">if</span> (propFile.exists()) &#123;</span><br><span class="line">   <span class="keyword">def</span> Properties props = <span class="keyword">new</span> Properties()</span><br><span class="line">   props.load(<span class="keyword">new</span> FileInputStream(propFile))</span><br><span class="line">   <span class="keyword">if</span> (props.containsKey(<span class="string">'STORE_FILE'</span>) &amp;&amp; props.containsKey(<span class="string">'STORE_PASSWORD'</span>) &amp;&amp;</span><br><span class="line">           props.containsKey(<span class="string">'KEY_ALIAS'</span>) &amp;&amp; props.containsKey(<span class="string">'KEY_PASSWORD'</span>)) &#123;</span><br><span class="line">       android.signingConfigs.release.storeFile = <span class="keyword">file</span>(props[<span class="string">'STORE_FILE'</span>])</span><br><span class="line">       android.signingConfigs.release.storePassword = props[<span class="string">'STORE_PASSWORD'</span>]</span><br><span class="line">       android.signingConfigs.release.keyAlias = props[<span class="string">'KEY_ALIAS'</span>]</span><br><span class="line">       android.signingConfigs.release.keyPassword = props[<span class="string">'KEY_PASSWORD'</span>]</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       android.buildTypes.release.signingConfig = <span class="keyword">null</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   android.buildTypes.release.signingConfig = <span class="keyword">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>   signing.properties文件内容（该文件和key与src目录同级）</p>
   <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">STORE_FILE=<span class="value">jks路径</span></span></span><br><span class="line"><span class="setting">STORE_PASSWORD=<span class="value">看名字</span></span></span><br><span class="line"><span class="setting">KEY_ALIAS=<span class="value">看名字</span></span></span><br><span class="line"><span class="setting">KEY_PASSWORD=<span class="value">看名字</span></span></span><br></pre></td></tr></table></figure>
<h1 id="我遇到过的错误">我遇到过的错误</h1><h2 id="sudo_-/gradlew_clean_出现错误">sudo ./gradlew clean 出现错误</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> What went <span class="string">wrong:</span></span><br><span class="line">A problem occurred configuring root project <span class="string">'Butler'</span>.</span><br><span class="line">&gt; Could not resolve all dependencies <span class="keyword">for</span> configuration <span class="string">':classpath'</span>.</span><br><span class="line">   &gt; Cannot resolve external dependency com.android.tools.<span class="string">build:</span><span class="string">gradle:</span><span class="number">1.3</span><span class="number">.0</span> because no repositories are defined.</span><br><span class="line">     Required <span class="string">by:</span></span><br><span class="line">         :<span class="string">Butler:</span>unspecified</span><br></pre></td></tr></table></figure>
<p> x项目中有类似 classpath ‘io.fabric.tools:gradle:1.+’的语句，</p>
<p> 改成最新的版本，或者确定版本名就好。（类似gradle:1.20.0结尾）</p>
<h2 id="定义打包时间函数_(放在android{}之前)">定义打包时间函数 (放在android{}之前)</h2><p>  def packageTime() {</p>
<pre><code>return new <span class="function"><span class="title">Date</span><span class="params">()</span></span>.<span class="function"><span class="title">format</span><span class="params">(<span class="string">"MM.dd"</span>, TimeZone.getTimeZone(<span class="string">"UTC"</span>)</span></span>)
</code></pre><p>  }</p>
<p>  使用方法：${packageTime()} 拼在字符串中</p>
<h2 id="修改生成的最终文件名(放在android{}内最后)">修改生成的最终文件名(放在android{}内最后)</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">applicationVariants.all &#123;</span><br><span class="line">      variant -&gt;</span><br><span class="line">        variant.outputs.<span class="keyword">each</span> &#123;</span><br><span class="line">            output -&gt;</span><br><span class="line">                <span class="keyword">def</span> outputFile = output.outputFile</span><br><span class="line">                <span class="keyword">if</span> (outputFile != <span class="keyword">null</span> &amp;&amp; outputFile.name.endsWith(<span class="string">'.apk'</span>)) &#123;</span><br><span class="line">                    <span class="keyword">File</span> outputDirectory = <span class="keyword">new</span> <span class="keyword">File</span>(outputFile.parent);</span><br><span class="line">                    <span class="keyword">def</span> fileName</span><br><span class="line">                    <span class="keyword">if</span> (variant.buildType.name == <span class="string">"release"</span>) &#123;</span><br><span class="line">                                            <span class="comment">// 输出apk名称</span></span><br><span class="line">                        fileName = <span class="string">"Butler_v$&#123;defaultConfig.versionName&#125;_$&#123;packageTime()&#125;.apk"</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        fileName = <span class="string">"Butler_v$&#123;defaultConfig.versionName&#125;_$&#123;packageTime()&#125;_beta.apk"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    output.outputFile = <span class="keyword">new</span> <span class="keyword">File</span>(outputDirectory, fileName)</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="报错1">报错1</h2>  <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="constant">Could </span><span class="keyword">not</span> resolve all dependencies <span class="keyword">for</span> configuration <span class="string">':classpath'</span>.</span><br><span class="line">&gt; <span class="constant">Cannot </span>resolve external dependency com.android.tools.<span class="symbol">build:</span><span class="symbol">gradle:</span><span class="number">1.3</span>.<span class="number">0</span> because no repositories are <span class="keyword">defined</span>.</span><br><span class="line">  <span class="constant">Required </span><span class="symbol">by:</span></span><br><span class="line">      <span class="symbol">:Butler</span><span class="symbol">:unspecified</span></span><br></pre></td></tr></table></figure>
<p>  解决地址： <a href="http://stackoverflow.com/questions/28921964/googles-android-basic-samples-code-broken-gradle-issues" target="_blank" rel="external">http://stackoverflow.com/questions/28921964/googles-android-basic-samples-code-broken-gradle-issues</a></p>
<h2 id="报错2">报错2</h2>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">What</span> <span class="tag">went</span> <span class="rule"><span class="attribute">wrong</span>:<span class="value"></span><br><span class="line">Execution failed for task <span class="string">':app:lint'</span>.</span><br><span class="line">Lint found errors in the project</span></span>; <span class="tag">aborting</span> <span class="tag">build</span>.</span><br></pre></td></tr></table></figure>
<p>解决方法:</p>
<p>  Fix the issues identified by lint, or add the following to your build script to proceed with errors:</p>
  <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">android</span> &#123;</span><br><span class="line">  <span class="title">lintOptions</span> &#123;</span><br><span class="line">      <span class="title">abortOnError</span> <span class="built_in">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="不知道什么原因不能调试了,报错如下">不知道什么原因不能调试了,报错如下</h2>  <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Waiting <span class="keyword">for</span> device.</span><br><span class="line">Cannot debug <span class="type">application</span> com.dingding.butler <span class="function_start"><span class="keyword">on</span></span> device motorola-xt1085-TA09004RZM.</span><br><span class="line">This <span class="type">application</span> <span class="keyword">does</span> <span class="keyword">not</span> have <span class="keyword">the</span> debuggable attribute enabled <span class="keyword">in</span> <span class="keyword">its</span> manifest.</span><br><span class="line">If you have manually <span class="keyword">set</span> <span class="keyword">it</span> <span class="keyword">in</span> <span class="keyword">the</span> manifest, <span class="keyword">then</span> remove <span class="keyword">it</span> <span class="keyword">and</span> let <span class="keyword">the</span> IDE automatically assign <span class="keyword">it</span>.</span><br><span class="line">If you are using Gradle, make sure <span class="keyword">that</span> your current variant <span class="keyword">is</span> debuggable.</span><br></pre></td></tr></table></figure>
<p>  解决办法：</p>
<p>  点击运行三角右边的机器人图标，选择’Edit Configurations…’–&gt;‘Defaults’</p>
<p>  出来的列表，每个都点击，看着像有关系的选择框都点下选中，好了…不知道哪个起的作用</p>
<p>有google到解决方法： Gradle下 release {‘这里添加 ‘debuggable true’’} 没试这个就好了</p>
<h2 id="无解BUG（已解决，见下篇博文)">无解BUG（已解决，见<a href="http://wangqiankun.github.io/2015/10/13/tools/Gradle%E7%B3%BB%E5%88%97%E4%B9%8BBuildConfig%E6%96%87%E4%BB%B6/">下篇博文</a>)</h2><p>  自动生成的BuildConfig文件，默认为release状态的（可能看不懂这句话 自己写遍就知道了），</p>
<p>  找了一下午，试了无数种方法，都不行！！！都不行！！！都不行！！！</p>
<p>  最后无奈，重新down了一份代码，就好了啊！！！就好了啊！！！就好了啊！！！坑爹玩意儿！</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>构建跟打包有天壤之别，一句命令可以打成你想要的各种包<br>可灵活配置生产与测试环境的差异…等</p>
<p>牛逼之处，远不止于此</p>
</blockquote>
<ol>
<li>在项目目录中先执行 ‘./gradlew clean’ 如果提]]>
    </summary>
    
      <category term="Tools" scheme="http://wangqiankun.github.io/tags/Tools/"/>
    
  </entry>
  
</feed>
