<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Qiankun's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://wangqiankun.github.io/"/>
  <updated>2016-07-11T04:47:45.000Z</updated>
  <id>http://wangqiankun.github.io/</id>
  
  <author>
    <name><![CDATA[WangQiankun]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[LitePal数据库框架保存改进]]></title>
    <link href="http://wangqiankun.github.io/2016/05/11/LitePal%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6%E4%BF%9D%E5%AD%98%E6%94%B9%E8%BF%9B/"/>
    <id>http://wangqiankun.github.io/2016/05/11/LitePal数据库框架保存改进/</id>
    <published>2016-05-11T09:49:20.000Z</published>
    <updated>2016-07-11T04:47:45.000Z</updated>
    <content type="html"><![CDATA[<p>郭霖推荐的LitePal用起来非常方便，但是当保存大量数据数据时，往往会花费很长时间（一个1300多条的数据，使用saveAll()竟然耗时10s+）。<br>稍作修改，自己写了个保存的方法。时间控制在1s内。</p>
<a id="more"></a>
<p>使用saveOrders2DB(mList)替换宇Litepal的DataSupport.saveAll(mList)</p>
<pre><code><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">saveOrders2DB</span><span class="params">(List&lt;Bean&gt; list)</span> </span>{

    ContentValues contentValues;
    SQLiteDatabase db = Connector.getDatabase();
    db.beginTransaction();
    <span class="keyword">try</span> {
        <span class="keyword">for</span> (Bean aBean : list) {
            contentValues = <span class="keyword">new</span> ContentValues();
            contentValues.put(<span class="string">"orderId"</span>, aBean.getOrderId());
            contentValues.put(<span class="string">"orderNo"</span>, aBean.getOrderNo());
            contentValues.put(<span class="string">"orderTime"</span>, aBean.getOrderTime() == <span class="keyword">null</span> ? 
                    <span class="keyword">null</span> : aBean.getOrderTime().getTime());

            <span class="comment">//注意，Litepal中的表名是你Bean类名的小写</span>
            db.insert(<span class="string">"bean"</span>, <span class="keyword">null</span>, contentValues);
        }
        db.setTransactionSuccessful();
    } <span class="keyword">catch</span> (Exception e) {
        <span class="keyword">throw</span> <span class="keyword">new</span> DataSupportException(e.getMessage());
    } <span class="keyword">finally</span> {
        db.endTransaction();
    }
}
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>郭霖推荐的LitePal用起来非常方便，但是当保存大量数据数据时，往往会花费很长时间（一个1300多条的数据，使用saveAll()竟然耗时10s+）。<br>稍作修改，自己写了个保存的方法。时间控制在1s内。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android TextView真实字高研究]]></title>
    <link href="http://wangqiankun.github.io/2016/04/23/Android%20TextView%E7%9C%9F%E5%AE%9E%E5%AD%97%E9%AB%98%E7%A0%94%E7%A9%B6/"/>
    <id>http://wangqiankun.github.io/2016/04/23/Android TextView真实字高研究/</id>
    <published>2016-04-23T12:31:54.000Z</published>
    <updated>2016-07-11T04:47:55.000Z</updated>
    <content type="html"><![CDATA[<p>#这一直是Android开发的痛点！<br>众说周知，Android开发中TextView控件有个无法解决的“bug”–TextView总是在上下有间距，导致在画界面的时候，都要根据UE给的标注做几次复杂的减法运算，累倒不说，还是可能会被UE打回重改！！！</p>
<a id="more"></a>
<p>终于有一天我发现了个方法<code>android:includeFontPadding=&quot;true&quot;</code>，欣喜若狂。屁颠屁颠的加上，还是不能用啊…世间还有真情？世间还有真爱？？</p>
<p>很久很久以后，又想解决这个问题了。也许是天意，让我看到了这个图（有些错误的标注，请无视）<img src="/pic/android_textview.png" alt="盗图哈"></p>
<p>大致就是说，Google大牛这样做是有道理的，毕竟世界上有这么多的语言不是?为了兼顾除中文外的特殊语言（隐约有些奇怪），好人Google就在上下各加上一些高度，还能获取每块的大小。</p>
<p>于是做了些数学运算，设置字号为10、50、100后的各块大小。log如下，看下规律</p>
<pre><code><span class="attribute">D/Aige</span>: <span class="string">top：-10.561523</span>
<span class="attribute">D/Aige</span>: <span class="string">ascent：-9.277344</span>
<span class="attribute">D/Aige</span>: <span class="string">leading：0.0</span>
<span class="attribute">D/Aige</span>: <span class="string">descent：2.4414063</span>
<span class="attribute">D/Aige</span>: <span class="string">bottom：2.709961</span>
<span class="attribute">D/Aige</span>: <span class="string">top-ascent/ascent：0.13842106</span>
<span class="attribute">D/Aige</span>: <span class="string">bottom/ascent：0.29210526</span>

<span class="http">
<span class="attribute">D/Aige</span>: <span class="string">top：-52.807617</span>
<span class="attribute">D/Aige</span>: <span class="string">ascent：-46.38672</span>
<span class="attribute">D/Aige</span>: <span class="string">leading：0.0</span>
<span class="attribute">D/Aige</span>: <span class="string">descent：12.207031</span>
<span class="attribute">D/Aige</span>: <span class="string">bottom：13.549805</span>
<span class="attribute">D/Aige</span>: <span class="string">top-ascent/ascent：0.13842106</span>
<span class="attribute">D/Aige</span>: <span class="string">bottom/ascent：0.29210526</span>

<span class="http"><span class="attribute">D/Aige</span>: <span class="string">top：-105.615234</span>
<span class="attribute">D/Aige</span>: <span class="string">ascent：-92.77344</span>
<span class="attribute">D/Aige</span>: <span class="string">leading：0.0</span>
<span class="attribute">D/Aige</span>: <span class="string">descent：24.414063</span>
<span class="attribute">D/Aige</span>: <span class="string">bottom：27.09961</span>
<span class="attribute">D/Aige</span>: <span class="string">top-ascent/ascent：0.13842106</span>
<span class="attribute">D/Aige</span>: <span class="string">bottom/ascent：0.29210526</span></span></span>
</code></pre><p>他们的比值是一样的！<br>我想大家都应该懂了，请记住他们<br>目前已经把这个比例给UE了，初步测试，改良后的标注，没问题。<br>等明天UE改进下标注，在来反馈结果。期待~</p>
<pre><code>top-ascent/ascent：<span class="number">0.13842106</span>
bottom/ascent：<span class="number">0.29210526</span>
</code></pre><p>以上一切想法的来源均来自<a href="http://blog.csdn.net/aigestudio/article/details/41447349" target="_blank" rel="external">请查看</a>，感谢AigeStudio大牛!!! </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>#这一直是Android开发的痛点！<br>众说周知，Android开发中TextView控件有个无法解决的“bug”–TextView总是在上下有间距，导致在画界面的时候，都要根据UE给的标注做几次复杂的减法运算，累倒不说，还是可能会被UE打回重改！！！</p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://wangqiankun.github.io/tags/Android/"/>
    
      <category term="TextView" scheme="http://wangqiankun.github.io/tags/TextView/"/>
    
      <category term="UI" scheme="http://wangqiankun.github.io/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Button的点击效果和Clickable效果]]></title>
    <link href="http://wangqiankun.github.io/2016/03/11/Button%E7%9A%84%E7%82%B9%E5%87%BB%E6%95%88%E6%9E%9C%E5%92%8CClickable%E6%95%88%E6%9E%9C/"/>
    <id>http://wangqiankun.github.io/2016/03/11/Button的点击效果和Clickable效果/</id>
    <published>2016-03-11T13:20:20.000Z</published>
    <updated>2016-07-11T04:48:54.000Z</updated>
    <content type="html"><![CDATA[<p>由于产品需求，Button的点击状态、Clickable状态都要有不同的显示效果<br>研究Selector半天也没有找到可以使不同状态同时展示<br>于是，就迂回用笨方法搞定</p>
<a id="more"></a>
<ul>
<li>1）自定义一个集成Button的类,重写setClickable状态，在两种状态设置不同背景色以及TextColor</li>
</ul>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BtnBottom</span> <span class="keyword">extends</span> <span class="title">Button</span> </span>{

    <span class="function"><span class="keyword">public</span> <span class="title">BtnBottom</span><span class="params">(Context context)</span> </span>{
        <span class="keyword">super</span>(context);
    }

    <span class="function"><span class="keyword">public</span> <span class="title">BtnBottom</span><span class="params">(Context context, AttributeSet attrs)</span> </span>{
        <span class="keyword">super</span>(context, attrs);
    }

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClickable</span><span class="params">(<span class="keyword">boolean</span> clickable)</span> </span>{
        <span class="keyword">super</span>.setClickable(clickable);
        <span class="keyword">if</span> (clickable) {
            <span class="keyword">this</span>.setBackgroundResource(R.drawable.bg_btn_bottom_normal);
            <span class="keyword">this</span>.setTextColor(getResources().getColor(R.color.text_fff));
        } <span class="keyword">else</span> {
            <span class="keyword">this</span>.setBackgroundColor(getResources().getColor(R.color.btn_f1f1f2));
            <span class="keyword">this</span>.setTextColor(getResources().getColor(R.color.text_d7d7d8));
        }
    }
}


<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BtnBottom</span> <span class="keyword">extends</span> <span class="title">Button</span> </span>{

    <span class="function"><span class="keyword">public</span> <span class="title">BtnBottom</span><span class="params">(Context context)</span> </span>{
        <span class="keyword">super</span>(context);
    }

    <span class="function"><span class="keyword">public</span> <span class="title">BtnBottom</span><span class="params">(Context context, AttributeSet attrs)</span> </span>{
        <span class="keyword">super</span>(context, attrs);
    }

    <span class="annotation">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClickable</span><span class="params">(<span class="keyword">boolean</span> clickable)</span> </span>{
        <span class="keyword">super</span>.setClickable(clickable);
        <span class="keyword">if</span> (clickable) {
            <span class="keyword">this</span>.setBackgroundResource(R.drawable.bg_btn_bottom_normal);
            <span class="keyword">this</span>.setTextColor(getResources().getColor(R.color.text_fff));
        } <span class="keyword">else</span> {
            <span class="keyword">this</span>.setBackgroundColor(getResources().getColor(R.color.btn_f1f1f2));
            <span class="keyword">this</span>.setTextColor(getResources().getColor(R.color.text_d7d7d8));
        }
    }
}
</code></pre><ul>
<li>2）因为需要点击效果，所以在clickable为true时，设置背景色为selector</li>
</ul>
<p>```<br>\&lt;?xml version=”1.0” encoding=”utf-8”?><br>\<selector xmlns:android="http://schemas.android.com/apk/res/android" \=""><br>    <item android:drawable="@color/btn_b311213a" android:state_pressed="true"><br>    <item android:drawable="@color/btn_b311213a" android:state_focused="true"><br>    <item android:drawable="@color/btn_11213a"><br></item></item></item></selector><br>```</p>
<blockquote>
<p>心得：selector 名为选择器，也就是说遇到对应的的item就会使用，可能之前顺序排列没做好，<br>或者可以在seletor中嵌套seletor？需待实验下</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>由于产品需求，Button的点击状态、Clickable状态都要有不同的显示效果<br>研究Selector半天也没有找到可以使不同状态同时展示<br>于是，就迂回用笨方法搞定</p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://wangqiankun.github.io/tags/Android/"/>
    
      <category term="Button" scheme="http://wangqiankun.github.io/tags/Button/"/>
    
      <category term="UI" scheme="http://wangqiankun.github.io/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MaterialDesign跳转动画效果实现]]></title>
    <link href="http://wangqiankun.github.io/2015/11/20/MaterialDesign%E8%B7%B3%E8%BD%AC%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/"/>
    <id>http://wangqiankun.github.io/2015/11/20/MaterialDesign跳转动画效果实现/</id>
    <published>2015-11-20T07:43:54.000Z</published>
    <updated>2015-11-20T08:10:29.000Z</updated>
    <content type="html"><![CDATA[<p>依旧先上效果<img src="/pic/md_jump.gif" width="160" height=""></p>
<p>在点击Activity1中的图片，跳转至Activity2。系统会根据两个Activity中图片的大小和位置，动态展现动画。</p>
<p>图中两个不同图片能看出google些许设计思路（同一个图片效果会更好）</p>
<p>上xml</p>
<p>Activity1中的</p>
<pre><code>&lt;ImageView
       android:<span class="property">id</span>=<span class="string">"@+id/imageView"</span>
       android:layout_width=<span class="string">"wrap_content"</span>
       android:layout_height=<span class="string">"wrap_content"</span>
       android:clickable=<span class="string">"true"</span>
       android:elevation=<span class="string">"8dp"</span>
       android:src=<span class="string">"@mipmap/ic_launcher"</span>
       android:transitionName=<span class="string">"transition_album_cover"</span> /&gt;
</code></pre><p>Activity2中的</p>
<pre><code><span class="tag">&lt;<span class="title">ImageView</span>
     <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span>
     <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>
     <span class="attribute">android:src</span>=<span class="value">"@mipmap/me"</span>
     <span class="attribute">android:transitionName</span>=<span class="value">"transition_album_cover"</span>
     <span class="attribute">tools:targetApi</span>=<span class="value">"honeycomb"</span> /&gt;</span>
</code></pre><p>其中在ImageView主要的设置为<code>android:transitionName=&quot;transition_album_cover&quot;</code><br>两个View中的android:transitionName需一致</p>
<p>接下来上Activity间跳转关键代码</p>
<pre><code>imageView = (ImageView) findViewById(R.id.imageView);
imageView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() {
    @Override
    <span class="keyword">public</span> <span class="keyword">void</span> onClick(View v) {


        Intent intent = <span class="keyword">new</span> Intent(Activity1.<span class="keyword">this</span>, Activity2.<span class="keyword">class</span>);
        String transitionName = <span class="string">"transition_album_cover"</span>;
        ActivityOptionsCompat <span class="keyword">options</span> =
                ActivityOptionsCompat.makeSceneTransitionAnimation(Activity1.<span class="keyword">this</span>,
                        imageView,          <span class="comment">// The view which starts the transition</span>
                        transitionName      <span class="comment">// The transitionName of the view we’re transitioning to</span>
                );
        ActivityCompat.startActivity(Activity2.<span class="keyword">this</span>, intent, <span class="keyword">options</span>.toBundle());
    }
});
</code></pre><p>其中参数transitionName要与xml中View的android:transitionName值对应</p>
<p>就酱~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>依旧先上效果<img src="/pic/md_jump.gif" width="160" height=""></p>
<p>在点击Activity1中的图片，跳转至Activity2。系统会根据两个Activity中图片的大小和位置，动态展现动画。</p>
<p>图中两]]>
    </summary>
    
      <category term="Android" scheme="http://wangqiankun.github.io/tags/Android/"/>
    
      <category term="MaterialDesign" scheme="http://wangqiankun.github.io/tags/MaterialDesign/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Toolbar的滚动效果]]></title>
    <link href="http://wangqiankun.github.io/2015/11/20/Toolbar%E7%9A%84%E6%BB%9A%E5%8A%A8%E6%95%88%E6%9E%9C/"/>
    <id>http://wangqiankun.github.io/2015/11/20/Toolbar的滚动效果/</id>
    <published>2015-11-20T06:57:07.000Z</published>
    <updated>2015-11-20T07:36:04.000Z</updated>
    <content type="html"><![CDATA[<p>效果不错，拿出单发个。如图<br><img src="/pic/md_scroll.gif" width="160" height=""></p>
<p>整个Toolbar的背景是一个图片，当向上滚动后，图片逐渐消失，Toolbar背景变成默认效果，Title也会动态的改变字体大小，以适应变小后的效果</p>
<p>图中界面可以分为两个部分，一个为Toolbar，展开时设置的为200dp，另一个为Toolbar下的主要内容</p>
<p>看下xml中的根布局</p>
<pre><code><span class="tag">&lt;<span class="title">android.support.design.widget.CoordinatorLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>
    <span class="attribute">xmlns:app</span>=<span class="value">"http://schemas.android.com/apk/res-auto"</span>
    <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span>
    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span>
    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>
    <span class="attribute">android:fitsSystemWindows</span>=<span class="value">"true"</span>
    <span class="attribute">tools:context</span>=<span class="value">".MainActivity"</span>&gt;</span>

    <span class="comment">&lt;!--第一部分的Toolbar--&gt;</span>
    <span class="tag">&lt;<span class="title">include</span> <span class="attribute">layout</span>=<span class="value">"@layout/toolbar"</span> /&gt;</span>

    <span class="comment">&lt;!--第二部分为Toolbar下的主要内容--&gt;</span>
    <span class="tag">&lt;<span class="title">android.support.v4.widget.NestedScrollView</span>
        <span class="attribute">android:id</span>=<span class="value">"@+id/item_detail_container"</span>
        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span>
        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>
        <span class="attribute">app:layout_behavior</span>=<span class="value">"@string/appbar_scrolling_view_behavior"</span>&gt;</span>

        <span class="tag">&lt;<span class="title">include</span> <span class="attribute">layout</span>=<span class="value">"@layout/content_main"</span> /&gt;</span>

    <span class="tag">&lt;/<span class="title">android.support.v4.widget.NestedScrollView</span>&gt;</span>

<span class="tag">&lt;/<span class="title">android.support.design.widget.CoordinatorLayout</span>&gt;</span>
</code></pre><p>第二部分必须要有滚动，才会有上图中的效果，所以在<code>content_main</code>外套了一层<code>android.support.v4.widget.NestedScrollView</code></p>
<p>其中toolbar的布局如下</p>
<pre><code>&lt;android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.AppBarLayout</span> xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>
    xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span>
    android:id=<span class="string">"@+id/app_bar"</span>
    android:layout_width=<span class="string">"match_parent"</span>
    android:layout_height=<span class="string">"200dp"</span>
    android:fitsSystemWindows=<span class="string">"true"</span>
    android:theme=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span>&gt;

    &lt;android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.CollapsingToolbarLayout</span>
        android:id=<span class="string">"@+id/toolbar_layout"</span>
        android:layout_width=<span class="string">"match_parent"</span>
        android:layout_height=<span class="string">"match_parent"</span>
        android:fitsSystemWindows=<span class="string">"true"</span>
        app:contentScrim=<span class="string">"?attr/colorPrimary"</span>
        android:<span class="attribute">background</span>=<span class="string">"@mipmap/ic_launcher"</span>
        app:layout_scrollFlags=<span class="string">"scroll|exitUntilCollapsed"</span>
        app:toolbarId=<span class="string">"@+id/toolbar"</span>&gt;

        &lt;android<span class="class">.support</span><span class="class">.v7</span><span class="class">.widget</span><span class="class">.Toolbar</span>
            android:id=<span class="string">"@+id/toolbar"</span>
            android:layout_width=<span class="string">"match_parent"</span>
            android:layout_height=<span class="string">"?attr/actionBarSize"</span>
            app:layout_collapseMode=<span class="string">"pin"</span>
            app:popupTheme=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span> /&gt;

    &lt;/android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.CollapsingToolbarLayout</span>&gt;

&lt;/android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.AppBarLayout</span>&gt;
</code></pre><p>向上滚动前的高度由<code>android:layout_height=&quot;200dp&quot;</code>控制，此语句放置在最外层的<code>android.support.design.widget.AppBarLayout</code>和放置在里层的<code>android.support.design.widget.CollapsingToolbarLayout</code>效果一致</p>
<p>不同的是设置背景图片<code>android:background=&quot;@mipmap/ic_launcher&quot;</code>，如果放在里层，png图片中的空白会被主配色代替，放在外层则不会</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>效果不错，拿出单发个。如图<br><img src="/pic/md_scroll.gif" width="160" height=""></p>
<p>整个Toolbar的背景是一个图片，当向上滚动后，图片逐渐消失，Toolbar背景变成默认效果，Title也会动态的改变]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Metarial Design样式EditText的实现]]></title>
    <link href="http://wangqiankun.github.io/2015/11/20/Metarial%20Design%E6%A0%B7%E5%BC%8FEditText/"/>
    <id>http://wangqiankun.github.io/2015/11/20/Metarial Design样式EditText/</id>
    <published>2015-11-20T03:04:52.000Z</published>
    <updated>2015-11-20T04:04:25.000Z</updated>
    <content type="html"><![CDATA[<p>样式如图<br><img src="/pic/md_edittext.png" width="160" height=""></p>
<p>实现比较简单，拿出一个EditText来举例<br>第一步：在xml中，注意EditText外部套了TextInputLayout布局</p>
<blockquote>
<p>其中EditText的hint内容，会在点击EditText后移到其左上方</p>
</blockquote>
<pre><code>&lt;android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.TextInputLayout</span>
    android:id=<span class="string">"@+id/input_layout_name"</span>
    android:layout_width=<span class="string">"match_parent"</span>
    android:layout_height=<span class="string">"wrap_content"</span>&gt;

    &lt;EditText
        android:id=<span class="string">"@+id/input_name"</span>
        android:layout_width=<span class="string">"match_parent"</span>
        android:layout_height=<span class="string">"wrap_content"</span>
        android:singleLine=<span class="string">"true"</span>
        android:hint=<span class="string">"@string/hint_name"</span> /&gt;
&lt;/android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.TextInputLayout</span>&gt;
</code></pre><p>第二步：代码中实现校验提示等功能</p>
<blockquote>
<p>在校验方法中，inputLayoutName.setError(“”)，set内容在EditText下方显示</p>
</blockquote>
<pre><code>TextInputLayout inputLayoutName = (TextInputLayout) findViewById(R.id.input_layout_name);
EditText inputName = (EditText) findViewById(R.id.input_name);

<span class="keyword">private</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isNameValid</span><span class="params">()</span> </span>{
    <span class="keyword">if</span> (inputName.getText().toString().trim().isEmpty()) {
        inputLayoutName.setError(getString(R.string.err_msg_name));
        requestFocus(inputName);
        <span class="keyword">return</span> <span class="keyword">false</span>;
    } <span class="keyword">else</span> {
        inputLayoutName.setErrorEnabled(<span class="keyword">false</span>);
    }

    <span class="keyword">return</span> <span class="keyword">true</span>;
}


inputName.addTextChangedListener(<span class="keyword">new</span> MyTextWatcher(inputName));

<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTextWatcher</span> <span class="keyword">implements</span> <span class="title">TextWatcher</span> </span>{

   <span class="keyword">private</span> View view;

   <span class="function"><span class="keyword">private</span> <span class="title">MyTextWatcher</span><span class="params">(View view)</span> </span>{
       <span class="keyword">this</span>.view = view;
   }

   <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence charSequence, <span class="keyword">int</span> i, <span class="keyword">int</span> i1, <span class="keyword">int</span> i2)</span> </span>{
   }

   <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence charSequence, <span class="keyword">int</span> i, <span class="keyword">int</span> i1, <span class="keyword">int</span> i2)</span> </span>{
   }

   <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable editable)</span> </span>{
       <span class="keyword">switch</span> (view.getId()) {
           <span class="keyword">case</span> R.id.input_name:
               isNameValid();
               <span class="keyword">break</span>;
       }
   }
}
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>样式如图<br><img src="/pic/md_edittext.png" width="160" height=""></p>
<p>实现比较简单，拿出一个EditText来举例<br>第一步：在xml中，注意EditText外部套了TextInputLayout布局]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Toolbar个人使用总结]]></title>
    <link href="http://wangqiankun.github.io/2015/11/13/Toolbar%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://wangqiankun.github.io/2015/11/13/Toolbar个人使用总结/</id>
    <published>2015-11-13T04:26:26.000Z</published>
    <updated>2015-11-23T08:42:34.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Toolbar的使用过程">Toolbar的使用过程</h3><h4 id="步骤1-xml中集成">步骤1-xml中集成</h4><blockquote>
<p>布局CoordinatorLayout作用：主要处理界面的滚动<br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0717/3196.html" target="_blank" rel="external">详见：CoordinatorLayout与滚动的处理</a></p>
</blockquote>
<pre><code>&lt;android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.CoordinatorLayout</span>
    xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>
    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span>
    android:layout_width=<span class="string">"match_parent"</span>
    android:layout_height=<span class="string">"match_parent"</span>
    android:fitsSystemWindows=<span class="string">"true"</span>
    tools:context=<span class="string">".MainActivity"</span>&gt;

    &lt;include layout=<span class="string">"@layout/toolbar"</span> /&gt;

    &lt;include layout=<span class="string">"@layout/content_main"</span> /&gt;

&lt;/android<span class="class">.support</span><span class="class">.design</span><span class="class">.widget</span><span class="class">.CoordinatorLayout</span>&gt;
</code></pre><p>其中toobar.xml内容为</p>
<pre><code><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>

<span class="comment">&lt;!--AppBarLayout 看到有人说可以起到滚动隐藏Toolbar的效果，目前没有实现，暂时放着...--&gt;</span>

<span class="tag">&lt;<span class="title">android.support.design.widget.AppBarLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>
    <span class="attribute">xmlns:app</span>=<span class="value">"http://schemas.android.com/apk/res-auto"</span>
    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span>
    <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>
    <span class="attribute">android:theme</span>=<span class="value">"@style/AppTheme.AppBarOverlay"</span>&gt;</span>

    <span class="tag">&lt;<span class="title">android.support.v7.widget.Toolbar</span>
        <span class="attribute">android:id</span>=<span class="value">"@+id/toolbar"</span>
        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span>
        <span class="attribute">android:layout_height</span>=<span class="value">"?attr/actionBarSize"</span>
        <span class="attribute">android:background</span>=<span class="value">"?attr/colorPrimary"</span>
        <span class="attribute">app:popupTheme</span>=<span class="value">"@style/AppTheme.PopupOverlay"</span> /&gt;</span>

<span class="tag">&lt;/<span class="title">android.support.design.widget.AppBarLayout</span>&gt;</span>
</code></pre><h4 id="步骤2-Activity类中集成">步骤2-Activity类中集成</h4><pre><code>Toolbar toolbar = <span class="list">(<span class="keyword">Toolbar</span>)</span> findViewById<span class="list">(<span class="keyword">R</span>.id.toolbar)</span><span class="comment">;</span>
setSupportActionBar<span class="list">(<span class="keyword">toolbar</span>)</span><span class="comment">;</span>
</code></pre><p>由此Toolbar就已经集成完毕，因为ActionBar不会隐藏，所以实用NoActionBar的主题或者在清单文件 activity节点配置 android:theme=”@style/AppTheme.NoActionBar 等</p>
<h3 id="Tips">Tips</h3><h4 id="content置于Toolbar下方">content置于Toolbar下方</h4><p>在content最外层使用 </p>
<pre><code><span class="label">app:</span>layout_behavior=<span class="string">"@string/appbar_scrolling_view_behavior"</span>
</code></pre><h4 id="设置Toolbar上的一些基础信息">设置Toolbar上的一些基础信息</h4><pre><code>toolbar.<span class="built_in">set</span>Title(<span class="string">"Title"</span>);            //设置Title
// 以上均需要在<span class="built_in">set</span>SupportActionBar之前执行，其他的放置位置‘貌似’没有影响
toolbar.<span class="built_in">set</span>Logo(R.mipmap.ic_launcher);
toolbar.<span class="built_in">set</span>Subtitle(<span class="string">"Subtitle"</span>); //设置副标题
toolbar.<span class="built_in">set</span>NavigationIcon(R.mipmap.ic_launcher);//需要在<span class="built_in">set</span>SupportActionBar后执行
以上功能可以使用 getSupportActionBar().get...（）.<span class="built_in">set</span>...代替（放置<span class="built_in">set</span>SupportActionBar后）
</code></pre><h4 id="设置Toolbar上的一些基础信息的点击监听">设置Toolbar上的一些基础信息的点击监听</h4><pre><code><span class="comment">//注意设置的位置哦</span>
toolbar.setNavigationOnClickListener(<span class="keyword">new</span> View.OnClickListener() {
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>{
        Log.d(<span class="string">"toolbar"</span>, <span class="string">"setNavigationOnClickListener"</span>);
    }
});
</code></pre><p>此监听貌似只对NavigationIcon的点击效果有用。</p>
<h4 id="设置Toolbar上的Menu（显示在Toobar右侧的部分）">设置Toolbar上的Menu（显示在Toobar右侧的部分）</h4><p>menu文件在/res/menu/目录下<br>main.xml</p>
<pre><code><span class="tag">&lt;<span class="title">menu</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>
    <span class="attribute">xmlns:app</span>=<span class="value">"http://schemas.android.com/apk/res-auto"</span>
    <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span>
    <span class="attribute">tools:context</span>=<span class="value">".MainActivity"</span>&gt;</span>

    <span class="comment">&lt;!-- app:showAsAction
     always：总是显示在界面上
     never：不显示在界面上，只让出现在右边的三个点中
     ifRoom：如果有位置才显示，不然就出现在右边的三个点中
     collapseActionView:占用尽量少的位置--&gt;</span>

    <span class="tag">&lt;<span class="title">item</span>
        <span class="attribute">android:id</span>=<span class="value">"@+id/action_settings"</span>
        <span class="attribute">android:orderInCategory</span>=<span class="value">"100"</span>
        <span class="attribute">android:title</span>=<span class="value">"@string/action_settings"</span>
        <span class="attribute">app:showAsAction</span>=<span class="value">"never"</span> /&gt;</span>
    <span class="tag">&lt;<span class="title">item</span>
        <span class="attribute">android:id</span>=<span class="value">"@+id/action_settings1"</span>
        <span class="attribute">android:orderInCategory</span>=<span class="value">"100"</span>
        <span class="attribute">android:title</span>=<span class="value">"@string/action_settings"</span>
        <span class="attribute">app:showAsAction</span>=<span class="value">"never"</span> /&gt;</span>

    <span class="comment">&lt;!-- app:actionViewClass="android.support.v7.widget.SearchView
        设置过后，点击此按钮可以在Toolbar上形成一个搜索框--&gt;</span>
    <span class="comment">&lt;!--showAsAction 中有 collapseActionView时，后面的三个点不会消失 --&gt;</span>
    <span class="tag">&lt;<span class="title">item</span>
        <span class="attribute">android:id</span>=<span class="value">"@+id/search"</span>
        <span class="attribute">android:icon</span>=<span class="value">"@android:drawable/ic_menu_search"</span>
        <span class="attribute">android:title</span>=<span class="value">"Search"</span>
        <span class="attribute">app:actionViewClass</span>=<span class="value">"android.support.v7.widget.SearchView"</span>
        <span class="attribute">app:showAsAction</span>=<span class="value">"ifRoom|collapseActionView"</span> /&gt;</span>

    <span class="comment">&lt;!--android.support.v7.widget.ShareActionProvider 分享的效果--&gt;</span>
    <span class="tag">&lt;<span class="title">item</span>
        <span class="attribute">android:id</span>=<span class="value">"@+id/nav_share"</span>
        <span class="attribute">android:icon</span>=<span class="value">"@android:drawable/ic_menu_share"</span>
        <span class="attribute">app:actionProviderClass</span>=<span class="value">"android.support.v7.widget.ShareActionProvider"</span>
        <span class="attribute">android:title</span>=<span class="value">"Share"</span>
        <span class="attribute">app:showAsAction</span>=<span class="value">"ifRoom"</span> /&gt;</span>

<span class="tag">&lt;/<span class="title">menu</span>&gt;</span>
</code></pre><p>Menu的点击事件监听：已知有两种实现方式</p>
<p>第一种方式：</p>
<pre><code>toolbar.setOnMenuItemClickListener(<span class="keyword">new</span> Toolbar.OnMenuItemClickListener() {
    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onMenuItemClick</span><span class="params">(MenuItem item)</span> </span>{
        <span class="keyword">switch</span> (item.getItemId()){
            <span class="keyword">case</span> R.id.action_settings:
                Log.d(<span class="string">"toolbar"</span>,<span class="string">"action_settings"</span>);
                <span class="keyword">break</span>;
            <span class="keyword">case</span> R.id.action_settings1:
                Log.d(<span class="string">"toolbar"</span>,<span class="string">"action_settings1"</span>);
                <span class="keyword">break</span>;
        }
        <span class="keyword">return</span> <span class="keyword">false</span>;
    }
});
</code></pre><p>第二种方式：</p>
<pre><code><span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>{
    <span class="comment">// Handle action bar item clicks here. The action bar will</span>
    <span class="comment">// automatically handle clicks on the Home/Up button, so long</span>
    <span class="comment">// as you specify a parent activity in AndroidManifest.xml.</span>
    <span class="keyword">int</span> id = item.getItemId();

    <span class="comment">//noinspection SimplifiableIfStatement</span>
    <span class="keyword">if</span> (id == R.id.action_settings) {
        Log.d(<span class="string">"toolbar"</span>,<span class="string">"action_settings2"</span>);
        <span class="keyword">return</span> <span class="keyword">false</span>;
    }
    <span class="keyword">if</span> (id == R.id.action_settings1) {
        Log.d(<span class="string">"toolbar"</span>,<span class="string">"action_settings12"</span>);
        <span class="keyword">return</span> <span class="keyword">false</span>;
    }

    <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onOptionsItemSelected</span><span class="params">(item)</span></span>;
}
</code></pre><p>####设置Toolbar上的搜索功能<br>以main.xml中的搜索功能模块举例</p>
<pre><code>&lt;<span class="property">item</span>
    android:<span class="property">id</span>=<span class="string">"@+id/search"</span>
    android:icon=<span class="string">"@android:drawable/ic_menu_search"</span>
    android:title=<span class="string">"Search"</span>
    app:actionViewClass=<span class="string">"android.support.v7.widget.SearchView"</span>
    app:showAsAction=<span class="string">"ifRoom|collapseActionView"</span> /&gt;
</code></pre><p>在Activity中实现以下方法进行对搜索框的一些操作</p>
<pre><code><span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>{
    getMenuInflater().inflate(R.menu.main, menu);

    MenuItem searchItem = menu.findItem(R.id.search);
    SearchView mSearchView = (SearchView) MenuItemCompat.getActionView(searchItem);
    <span class="comment">//设置搜索框hint内容</span>
    mSearchView.setQueryHint(<span class="string">"QueryHint..."</span>);
    SearchView.SearchAutoComplete textView = (SearchView.SearchAutoComplete)
    mSearchView.findViewById(R.id.search_src_text);
    <span class="comment">//设置搜索框中输入文字的颜色</span>
    textView.setTextColor(Color.BLACK);
    <span class="comment">//搜索内容监听</span>
    searchView.setOnQueryTextListener(<span class="keyword">new</span> SearchView.OnQueryTextListener() {

        <span class="annotation">@Override</span>
        <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onQueryTextSubmit</span><span class="params">(String query)</span> </span>{
            Log.d(<span class="string">"onQueryTextSubmit"</span>, query);
            <span class="keyword">return</span> <span class="keyword">false</span>;
        }

        <span class="annotation">@Override</span>
        <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onQueryTextChange</span><span class="params">(String newText)</span> </span>{
            Log.d(<span class="string">"onQueryTextChange"</span>, newText);
            <span class="keyword">return</span> <span class="keyword">false</span>;
        }
    });        

    <span class="keyword">return</span> <span class="keyword">true</span>;
}            
</code></pre><h4 id="设置Toolbar上的分享功能">设置Toolbar上的分享功能</h4><p>还以main.xml中的搜索功能模块举例</p>
<pre><code>&lt;<span class="property">item</span>
    android:<span class="property">id</span>=<span class="string">"@+id/nav_share"</span>
    android:icon=<span class="string">"@android:drawable/ic_menu_share"</span>
    app:actionProviderClass=<span class="string">"android.support.v7.widget.ShareActionProvider"</span>
    android:title=<span class="string">"Share"</span>
    app:showAsAction=<span class="string">"ifRoom"</span> 
</code></pre><p>在Activity中实现以下方法进行对分享按钮的操作，点击分享按钮后，会弹出系统匹配出的应用列表</p>
<pre><code><span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>{
    getMenuInflater().inflate(R.menu.main, menu);

    ShareActionProvider mShareActionProvider = (ShareActionProvider)
    MenuItemCompat.getActionProvider(menu.findItem(R.id.action_share));
    Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_SEND);
    intent.setType(<span class="string">"text/*"</span>);
    mShareActionProvider.setShareIntent(intent);
    <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onCreateOptionsMenu</span><span class="params">(menu)</span></span>;
}
</code></pre><h4 id="设置Toolbar的颜色">设置Toolbar的颜色</h4><p>1、 toolbar.setBackgroundColor(Color.BLACK);</p>
<p>2、</p>
<pre><code>&lt;android<span class="class">.support</span><span class="class">.v7</span><span class="class">.widget</span><span class="class">.Toolbar</span>
       android:id=<span class="string">"@+id/toolbar"</span>
       android:layout_width=<span class="string">"match_parent"</span>
       android:layout_height=<span class="string">"?attr/actionBarSize"</span>
       android:<span class="attribute">background</span>=<span class="string">"?attr/colorPrimary"</span>
       app:popupTheme=<span class="string">"@style/AppTheme.PopupOverlay"</span> /&gt;
</code></pre><p> toolbar.setBackground（）还可以设置图片额</p>
<p> 当然，状态栏也要跟着变换。这个稍后补充…</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Toolbar的使用过程">Toolbar的使用过程</h3><h4 id="步骤1-xml中集成">步骤1-xml中集成</h4><blockquote>
<p>布局CoordinatorLayout作用：主要处理界面的滚动<br><a href="http:/]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[RecyclerView使用]]></title>
    <link href="http://wangqiankun.github.io/2015/11/12/RecyclerView%E4%BD%BF%E7%94%A8-md/"/>
    <id>http://wangqiankun.github.io/2015/11/12/RecyclerView使用-md/</id>
    <published>2015-11-12T03:28:04.000Z</published>
    <updated>2015-11-18T07:56:37.000Z</updated>
    <content type="html"><![CDATA[<p> 全名 android.support.v7.widget.RecyclerView</p>
]]></content>
    <summary type="html">
    <![CDATA[<p> 全名 android.support.v7.widget.RecyclerView</p>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio快捷键 -- OS X 10.5+]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/tools/Android%20Studio%E5%BF%AB%E6%8D%B7%E9%94%AE%20--%20OS%20X%2010.5+/"/>
    <id>http://wangqiankun.github.io/2015/10/13/tools/Android Studio快捷键 -- OS X 10.5+/</id>
    <published>2015-10-13T14:39:32.000Z</published>
    <updated>2015-10-13T14:55:33.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><em>F1–F12均需要加fn才能生效（可调成不用fn）</em></p>
</blockquote>
<h2 id="描述|快捷键|英文注释">描述|快捷键|英文注释</h2><ol>
<li>展示／关闭功能块    | cmd + 0－9 | 可操作界面上均有<u>0</u>-<u>9</u>:</li>
<li>单行注释    | cmd + / | Comment with Line Comment</li>
<li>多行注释    | cmd + option + /    | Comment with Block Comment</li>
<li>格式化代码| cmd + option + L    | Reformat code</li>
<li>选中代码向上/向下移动| cmd + shift + ⬆️/⬇️    | Move Statement Up/Down</li>
<li>跳转到下／上个方法 | control ＋ ⬇️／⬆️（系统占用改＋Fn）|Next／Previous Method</li>
</ol>
<p>##最近需要掌握的快捷键</p>
<ol>
<li>展示’方法/类/变量’被使用的列表 | cmd + B | Declaration</li>
<li><p>跳转到继承的方法/类 | cmd + shift + B | Implementation</p>
</li>
<li><p>展示最近查看的文件列表 | cmd + E | Recent Files</p>
</li>
<li><p>展示最近修改的文件列表 | cmd + shift + E | Recently Changed Files</p>
</li>
<li><p>在测试代码与产品代码间切换 | cmd + shift + T | Test</p>
</li>
<li>查看JavaDoc | F1 / ctrl + J | Quick Documentation</li>
<li>查看源代码 | cmd + Y | Quick Definition</li>
</ol>
<p>##方法</p>
<ol>
<li>导入包、自动修正、快速修复| option + return| Show intention actions</li>
<li>生成geter/seter方法|    cmd + N / ctrl + return |    Generate</li>
<li>优化导入包| ctrl + option + O| Optimize Imports</li>
<li>查看方法说明文档|    ctrl + J | Quick Documentation</li>
<li>方法参数提示|     cmd + P | Parameter Info</li>
<li>全局修改变量名、类名| cmd + F6 | Change Signature</li>
</ol>
<p>##搜索</p>
<ol>
<li>本类中所有的方法、属性｜ cmd + F12 | File Structure</li>
<li>本类中所有的方法、属性在左侧显示| cmd + 7 | Structure</li>
<li>全局代码搜索| cmd + shift + F| Find in Path</li>
<li>全局代码替换| cmd + shift + R| Replace in Path</li>
</ol>
<p>##模版代码</p>
<ol>
<li>插入模版代码| cmd + J|Insert Live Template</li>
<li>添加模版代码| cmd + option + J|Surround With Live Template</li>
</ol>
<p>##其他</p>
<ol>
<li>从最近的缓冲区粘贴| cmd ＋ shift ＋v| Paste from History</li>
<li>扩大选中区域| option + ⬆️|Extend Selection</li>
<li>缩小选中区域| option + ⬇️|Shrink Selection</li>
</ol>
<p>##版本控制</p>
<ol>
<li>Update 代码| cmd + T |Vcs.Update Project</li>
<li>Check 代码| cmd + K |Check in Project</li>
<li>弹出版本控制菜单| ctrl + V |Vcs Operations Popup</li>
</ol>
<p>##Debug</p>
<ol>
<li>结束debug| cmd + F2 |</li>
<li>跳转到下个断点| cmd + option + R |</li>
</ol>
<blockquote>
<p>参考：<br><a href="http://www.juvenxu.com/2013/07/18/my-most-used-intellij-idea-shortcuts/" target="_blank" rel="external">我最常使用的一些IntelliJ IDEA快捷键</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><em>F1–F12均需要加fn才能生效（可调成不用fn）</em></p>
</blockquote>
<h2 id="描述|快捷键|英文注释">描述|快捷键|英文注释</h2><ol>
<li>展示／关闭功能块    | cmd + 0－9 |]]>
    </summary>
    
      <category term="Tools" scheme="http://wangqiankun.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio 添加support库]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/Android%20Studio%C2%A0%E6%B7%BB%E5%8A%A0support%E5%BA%93/"/>
    <id>http://wangqiankun.github.io/2015/10/13/Android Studio 添加support库/</id>
    <published>2015-10-13T14:38:25.000Z</published>
    <updated>2015-10-26T09:00:22.000Z</updated>
    <content type="html"><![CDATA[<p>用到v4、v7包时不知道怎么在gradle中导入，或者不知道怎么写<br>可以使用快捷键’commend+;’进入’Project Structure’设置界面。<br>上排找到’Dependencies’标签，点击’+’号。就可以找到本地的v4、v7的依赖。ok既可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>用到v4、v7包时不知道怎么在gradle中导入，或者不知道怎么写<br>可以使用快捷键’commend+;’进入’Project Structure’设置界面。<br>上排找到’Dependencies’标签，点击’+’号。就可以找到本地的v4、v7的依赖。ok既可。</]]>
    </summary>
    
      <category term="Android" scheme="http://wangqiankun.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ToastUtils.java]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/ToastUtils-java/"/>
    <id>http://wangqiankun.github.io/2015/10/13/ToastUtils-java/</id>
    <published>2015-10-13T14:30:50.000Z</published>
    <updated>2015-10-13T14:34:30.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wqk.utils;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">import</span> android.content.Context;</span><br><span class="line">  <span class="keyword">import</span> android.os.Handler;</span><br><span class="line">  <span class="keyword">import</span> android.os.Looper;</span><br><span class="line">  <span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * 公共Toast类，</span><br><span class="line">   * Created by wqk on 15/8/29.</span><br><span class="line">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToastUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> Looper mainLooper = Looper.getMainLooper();</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> Handler <span class="keyword">handler</span> = <span class="keyword">new</span> Handler(Looper.getMainLooper());</span><br><span class="line"></span><br><span class="line">      ToastUtils() &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">showL</span><span class="params">(Context context, <span class="keyword">int</span> resId)</span> </span>&#123;</span><br><span class="line">          show(context, context.getResources().getText(resId), Toast.LENGTH_LONG);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">showL</span><span class="params">(Context context, String string)</span> </span>&#123;</span><br><span class="line">          show(context, string, Toast.LENGTH_LONG);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">showS</span><span class="params">(Context context, <span class="keyword">int</span> resId)</span> </span>&#123;</span><br><span class="line">          show(context, context.getResources().getText(resId), Toast.LENGTH_SHORT);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">showS</span><span class="params">(Context context, String string)</span> </span>&#123;</span><br><span class="line">          show(context, string, Toast.LENGTH_SHORT);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> CharSequence text, <span class="keyword">final</span> <span class="keyword">int</span> duration)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (Looper.myLooper() == mainLooper) &#123;</span><br><span class="line">              Toast.makeText(context, text, duration).show();</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">handler</span>.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                  <span class="annotation">@Override</span></span><br><span class="line">                  <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                      Toast.makeText(context, text, duration).show();</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span cla]]>
    </summary>
    
      <category term="Android" scheme="http://wangqiankun.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RxJava小笔记]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/RxJava%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    <id>http://wangqiankun.github.io/2015/10/13/RxJava小笔记/</id>
    <published>2015-10-13T14:29:13.000Z</published>
    <updated>2015-10-13T15:02:05.000Z</updated>
    <content type="html"><![CDATA[<p>自用，摘抄于<a href="http://blog.csdn.net/lzyzsd/article/category/2767743" target="_blank" rel="external">大头鬼blog</a></p>
<p>###基本流程<br>一般响应式编程的信息流如下所示：<br>Observable -&gt; Operator 1 -&gt; Operator 2 -&gt; Operator 3 -&gt; Subscriber<br>observable是事件的生产者，subscriber是事件最终的消费者。<br>Operators 即操作符：为了解决对Observable对象的变换的问题。用于在Observable和最终的Subscriber之间修改Observable发出的事件</p>
<ol>
<li>Observable<string> stringObservable = Observable.create(new Observable.OnSub…){…}</string></li>
<li>Subscriber<string> subscriber = new Subscriber<string>() {…}</string></string></li>
<li>stringObservable.subscribe(subscriber);<br>通俗解释下上述代码：1为创建事件 2.</li>
</ol>
<h4 id="响应式特点">响应式特点</h4><p>Subscriber有三个方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123; System.out.println(s); &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"Completed!"</span>); &#125;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123; System.out.println(<span class="string">"Ouch!"</span>); &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>1.只要有异常发生onError()一定会被调用</p>
<p>这极大的简化了错误处理。只需要在一个地方处理错误即可以。</p>
<p>2.操作符不需要处理异常</p>
<p>将异常处理交给订阅者来做，Observerable的操作符调用链中一旦有一个抛出了异常，就会直接执行onError()方法。</p>
<p>3.你能够知道什么时候订阅者已经接收了全部的数据。</p>
<p>####Operators常用操作符</p>
<ol>
<li>map 就是用来把把一个事件转换为另一个事件的。</li>
<li>flatMap 它可以返回任何它想返回的Observable对象。</li>
<li>filter(title -&gt; title != null)  过滤某种不满足条件，比如!＝nullfilter()输出和输入相同的元素，并且会过滤掉那些不满足检查条件的。</li>
<li>take()输出最多指定数量的结果。 take(5)</li>
<li>doOnNext()允许我们在每次输出一个元素之前做一些额外的事情，比如这里的保存标题。.doOnNext(title -&gt; saveTitle(title))</li>
<li>.subscribeOn(Schedulers.io()) 指定在Schedulers io中执行</li>
<li>.observeOn(AndroidSchedulers.mainThread()) 指定在主线程中执行</li>
<li>Observable.subscribe()返回一个Observable  其中纪录了是否与订阅者有关联 。调用unsubscribing方法可以取消关联，并立即停止整个调用链</li>
<li>可自定义</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>自用，摘抄于<a href="http://blog.csdn.net/lzyzsd/article/category/2767743" target="_blank" rel="external">大头鬼blog</a></p>
<p>###基本流程<br>一般响应式编程]]>
    </summary>
    
      <category term="Android" scheme="http://wangqiankun.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Studio使用Java8的lambda命令]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/Studio%E4%BD%BF%E7%94%A8Java8%E7%9A%84lambda%E5%91%BD%E4%BB%A4/"/>
    <id>http://wangqiankun.github.io/2015/10/13/Studio使用Java8的lambda命令/</id>
    <published>2015-10-13T14:27:30.000Z</published>
    <updated>2015-10-13T14:27:56.000Z</updated>
    <content type="html"><![CDATA[<p>###使用前<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span> button = (<span class="type">Button</span>) findViewById(R.id.button);</span><br><span class="line">button.setOnClickListener(new <span class="type">View</span>.<span class="type">OnClickListener</span>() &#123;</span><br><span class="line">   @<span class="type">Override</span></span><br><span class="line">   public <span class="type">void</span> onClick(<span class="type">View</span> v) &#123;</span><br><span class="line">       <span class="keyword">method</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>###使用后(我所知道的所有的匿名内部类都可简化)<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span> button = (<span class="type">Button</span>) findViewById(R.id.button);</span><br><span class="line">button.setOnClickListener(v -&gt; <span class="keyword">method</span>());</span><br></pre></td></tr></table></figure></p>
<p>1.在Project工程目录使用</p>
<pre><code><span class="keyword">dependencies</span> {
<span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:1.2.3'</span>
<span class="keyword">classpath</span> <span class="string">'me.tatarka:gradle-retrolambda:3.1.0'</span>
<span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span>
<span class="comment">// in the individual module build.gradle files</span>
}
</code></pre><p> 2.在Moudule中使用 以下是例子</p>
<pre><code>apply plugin: <span class="string">'com.android.application'</span>
<span class="comment">//添加－1</span>
apply plugin: <span class="string">'me.tatarka.retrolambda'</span>


android {
compileSdkVersion <span class="number">21</span>
buildToolsVersion <span class="string">"21.1.2"</span>

defaultConfig {
    applicationId <span class="string">"com.wqk.demo.rxandroid"</span>
    minSdkVersion <span class="number">14</span>
    targetSdkVersion <span class="number">21</span>
    versionCode <span class="number">1</span>
    versionName <span class="string">"1.0"</span>
}

<span class="comment">//添加－2</span>
compileOptions {
    <span class="keyword">sourceCompatibility</span> JavaVersion.VERSION_1_8
    <span class="keyword">targetCompatibility</span> JavaVersion.VERSION_1_8
}

buildTypes {
    release {
        minifyEnabled <span class="keyword">false</span>
        proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span>
        }
    }
}

<span class="keyword">dependencies</span> {
    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(<span class="keyword">include</span>: [<span class="string">'*.jar'</span>], dir: <span class="string">'libs'</span>)
    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:22.2.0'</span>
    <span class="keyword">compile</span> <span class="string">'io.reactivex:rxandroid:0.25.0'</span>
}

<span class="keyword">repositories</span> {
    mavenCentral()
}

<span class="comment">//添加JAVA8支持 －3</span>
retrolambda {
<span class="comment">//Comend＋；可以弹出本地JDK地址设置界面，拷贝就行</span>
   jdk <span class="string">"/Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home"</span>
}
</code></pre><p>3.注意事项：需下载JAVA8 （编码可以不用，在Gradle另配）</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>###使用前<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><]]>
    </summary>
    
      <category term="Android" scheme="http://wangqiankun.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AndroidSudio下用butterknife注解]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/AndroidSudio%E4%B8%8B%E7%94%A8butterknife%E6%B3%A8%E8%A7%A3/"/>
    <id>http://wangqiankun.github.io/2015/10/13/AndroidSudio下用butterknife注解/</id>
    <published>2015-10-13T14:17:58.000Z</published>
    <updated>2015-10-13T14:18:23.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>在gradle中引用 compile ‘compile ‘com.jakewharton:butterknife:7.0.1’’ 这个库<br>最新版本<a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">点击这里查看</a></li>
<li>在插件搜butterknife-zelezny，然后安装</li>
<li>按<a href="https://github.com/avast/android-butterknife-zelezny" target="_blank" rel="external">这里</a>的动图提示的快捷键来就行了</li>
</ol>
<blockquote>
<p>注意：使用快捷键的时候，需要把鼠标放在layout的资源文件名上。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li>在gradle中引用 compile ‘compile ‘com.jakewharton:butterknife:7.0.1’’ 这个库<br>最新版本<a href="https://github.com/JakeWharton/butterknife" ta]]>
    </summary>
    
      <category term="Android" scheme="http://wangqiankun.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[那些年我所趟过的坑系列之Git配置双账号]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/tools/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E6%89%80%E8%B6%9F%E8%BF%87%E7%9A%84%E5%9D%91%E7%B3%BB%E5%88%97%E4%B9%8BGit%E9%85%8D%E7%BD%AE%E5%8F%8C%E8%B4%A6%E5%8F%B7/"/>
    <id>http://wangqiankun.github.io/2015/10/13/tools/那些年我所趟过的坑系列之Git配置双账号/</id>
    <published>2015-10-13T14:15:15.000Z</published>
    <updated>2015-10-13T14:16:59.000Z</updated>
    <content type="html"><![CDATA[<p>提交代码遇到权限问题：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">localhost:</span>main wangqiankun<span class="variable">$ </span>git push origin <span class="constant">HEAD</span><span class="symbol">:refs/for/master</span></span><br><span class="line"><span class="constant">Username</span> <span class="keyword">for</span> <span class="string">'http://192.xxx.xx.xxx'</span><span class="symbol">:</span> wangqiankun</span><br><span class="line"><span class="constant">Password</span> <span class="keyword">for</span> <span class="string">'http://wangqiankun@192.xxx.xx.xxx'</span><span class="symbol">:</span></span><br><span class="line"><span class="symbol">remote:</span> <span class="constant">Unauthorized</span></span><br><span class="line"><span class="symbol">fatal:</span> <span class="constant">Authentication</span> failed <span class="keyword">for</span> <span class="string">'http://192.xxx.xx.xxx/biz/mobile/dd-android-agent/'</span></span><br></pre></td></tr></table></figure>
<p>##错误</p>
<ol>
<li>在clone代码时需要选中“clone with commit-msg hook”和“SSH”两个选项<br>拷贝clone代码回车后，如果让你输入账号就是操作不正确，哪怕输入后能down代码</li>
<li>配置config时需如下输入</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hexcolor">#Def</span>ault work user (wangqiankun@zufangit.cn)</span><br><span class="line">Host <span class="number">192</span><span class="class">.xxx</span><span class="class">.xx</span><span class="class">.xxx</span></span><br><span class="line">        User wangqiankun</span><br><span class="line">        HostName <span class="number">192</span><span class="class">.xxx</span><span class="class">.xx</span><span class="class">.xxx</span></span><br><span class="line">        IdentityFile ~/.ssh/id_rsa</span><br><span class="line"><span class="id">#GitHub</span> user (wangqiankun@outloo.com)</span><br><span class="line">Host github<span class="class">.com</span></span><br><span class="line">        User wangqiankun@outlook<span class="class">.com</span></span><br><span class="line">        HostName github<span class="class">.com</span></span><br><span class="line">        IdentityFile ~/.ssh/gitgub_rsa</span><br><span class="line">~</span><br></pre></td></tr></table></figure>
<p>注意细节：</p>
<ol>
<li>Host与HostName需一致，并且“192.xxx.xx.xxx”不可写为“<a href="http://192.xxx.xx.xxx/”" target="_blank" rel="external">http://192.xxx.xx.xxx/”</a></li>
<li>“~/.ssh/id_rsa”中“id_rsa”文件与账号对应</li>
</ol>
<h3 id="BaiBai!">BaiBai!</h3>]]></content>
    <summary type="html">
    <![CDATA[<p>提交代码遇到权限问题：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</sp]]>
    </summary>
    
      <category term="Tools" scheme="http://wangqiankun.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Studio使用Gerrit插件]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/tools/Studio%E4%BD%BF%E7%94%A8Gerrit%E6%8F%92%E4%BB%B6/"/>
    <id>http://wangqiankun.github.io/2015/10/13/tools/Studio使用Gerrit插件/</id>
    <published>2015-10-13T14:13:03.000Z</published>
    <updated>2015-10-13T14:51:39.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>搜索安装Gerrit插件</li>
<li>在菜单中设置URL和Git用户名和密码<br> <img src="/pic/gerrit1.png" alt=""></li>
<li>在AS的主界面就能看到详细信息了<br> <img src="/pic/gerrit2.png" alt=""></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li>搜索安装Gerrit插件</li>
<li>在菜单中设置URL和Git用户名和密码<br> <img src="/pic/gerrit1.png" alt=""></li>
<li>在AS的主界面就能看到详细信息了<br> <img src="/pic/gerr]]>
    </summary>
    
      <category term="Tools" scheme="http://wangqiankun.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git入门]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/tools/git%E5%85%A5%E9%97%A8/"/>
    <id>http://wangqiankun.github.io/2015/10/13/tools/git入门/</id>
    <published>2015-10-13T14:12:50.000Z</published>
    <updated>2015-10-13T14:44:15.000Z</updated>
    <content type="html"><![CDATA[<p>###常用命令</p>
<ol>
<li>从服务器down代码  -&gt;git clone</li>
<li>查看提交纪录  -&gt;git log</li>
<li>添加某个修改的文件  -&gt;git add 修改的文件</li>
<li>把不想提交的文件放入.gitignore中  -&gt;不知道</li>
<li>add全部修改过的文件  -&gt;git commit -a或git commit —all</li>
<li>更新代码  -&gt;git pull -r（r表示rebase）</li>
<li>本地提交代码  -&gt;git commit -m “这里是备注”</li>
<li>向服务器提交代码  -&gt;git push（未确认）</li>
<li>把修改提交到gerrit中repo的master分支上（如果不是master分支，refs/for/分支名） -&gt;git push origin HEAD:refs/for/master</li>
<li>本地纪录提交审核不通过的代码（git add 修改的文件）  -&gt;git commit —amend<br>11status</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>###常用命令</p>
<ol>
<li>从服务器down代码  -&gt;git clone</li>
<li>查看提交纪录  -&gt;git log</li>
<li>添加某个修改的文件  -&gt;git add 修改的文件</li>
<li>把不想提交的文件放入.]]>
    </summary>
    
      <category term="Tools" scheme="http://wangqiankun.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用友盟自定义错误]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/%E4%BD%BF%E7%94%A8%E5%8F%8B%E7%9B%9F%E8%87%AA%E5%AE%9A%E4%B9%89%E9%94%99%E8%AF%AF/"/>
    <id>http://wangqiankun.github.io/2015/10/13/使用友盟自定义错误/</id>
    <published>2015-10-13T12:16:41.000Z</published>
    <updated>2015-10-13T12:25:11.000Z</updated>
    <content type="html"><![CDATA[<p>因为catch的Error或Exception友盟无法获取，那么就可以使用友盟提供的自定义错误来解决</p>
<ol>
<li>在AndroidManifest.xml里面添加读取日志的权限android.permission.READ_LOGS</li>
<li>在MainActicity的OnCreate方法中调用<br>MobclickAgent.setCatchUncaughtExceptions(true);</li>
<li>在catch的语句中使用用MobclickAgent.reportError(Context context,String error) 或者<br>MobclickAgent.reportError(Context context, Throwable e)语句，使友盟上传日志</li>
</ol>
<p>也可以自定义标签<br>MobclickAgent.onEvent(Contextcontext, String event_id, String  label);</p>
<p>参考<a href="http://www.apkbus.com/home.php?mod=space&amp;uid=317549&amp;do=blog&amp;id=54835" target="_blank" rel="external">MobclickAgent——友盟用户分析工具</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>因为catch的Error或Exception友盟无法获取，那么就可以使用友盟提供的自定义错误来解决</p>
<ol>
<li>在AndroidManifest.xml里面添加读取日志的权限android.permission.READ_LOGS</li>
<li>在Mai]]>
    </summary>
    
      <category term="Android" scheme="http://wangqiankun.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TextView中的滚动效果]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/TextView%E4%B8%AD%E7%9A%84%E6%BB%9A%E5%8A%A8%E6%95%88%E6%9E%9C/"/>
    <id>http://wangqiankun.github.io/2015/10/13/TextView中的滚动效果/</id>
    <published>2015-10-13T12:11:36.000Z</published>
    <updated>2015-10-13T12:12:04.000Z</updated>
    <content type="html"><![CDATA[<p>只需要要在xml中添加以下字段<br>android:scrollbars=”vertical” //垂直 可以其他滚动方向</p>
<p>也可以扩展以下配置<br>android:scrollbarStyle=”X” //其中X为outsideOverlay或insideOverlay。<br>android:scrollbarFadeDuration=”X” //其中X表示滚动条从出现到消失的时间，单位是毫秒。</p>
<p>android:fadingEdge=”vertical” //设置拉滚动条时 ，边框渐变的方向。</p>
<blockquote>
<p>参考资料：<br><a href="http://blog.csdn.net/crazyzhangcrazy/article/details/8596451" target="_blank" rel="external">[Android] TextView的垂直滚动效果</a><br><a href="http://www.open-open.com/lib/view/open1392086471160.html" target="_blank" rel="external">Android View 属性详解</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>只需要要在xml中添加以下字段<br>android:scrollbars=”vertical” //垂直 可以其他滚动方向</p>
<p>也可以扩展以下配置<br>android:scrollbarStyle=”X” //其中X为outsideOverlay或inside]]>
    </summary>
    
      <category term="Android" scheme="http://wangqiankun.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用merge标签 减少布局嵌套]]></title>
    <link href="http://wangqiankun.github.io/2015/10/13/%E4%BD%BF%E7%94%A8merge%E6%A0%87%E7%AD%BE%20%E5%87%8F%E5%B0%91%E5%B8%83%E5%B1%80%E5%B5%8C%E5%A5%97/"/>
    <id>http://wangqiankun.github.io/2015/10/13/使用merge标签 减少布局嵌套/</id>
    <published>2015-10-13T12:00:17.000Z</published>
    <updated>2015-10-13T12:01:58.000Z</updated>
    <content type="html"><![CDATA[<p>当包含有mearge标签的布局被添加到另一个布局时，该布局的merge节点会被删除，而该布局的子View会被肢解添加到新的父布局中</p>
<p>merge标签结合include标签一起使用时尤其有用</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>当包含有mearge标签的布局被添加到另一个布局时，该布局的merge节点会被删除，而该布局的子View会被肢解添加到新的父布局中</p>
<p>merge标签结合include标签一起使用时尤其有用</p>
]]>
    </summary>
    
      <category term="Android" scheme="http://wangqiankun.github.io/tags/Android/"/>
    
  </entry>
  
</feed>
